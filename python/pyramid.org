* Daily Start Steps
** Start pServer

+ Open Terminal

+ Start virtual env

 : % v pyr

+ cd to home folder

 : % cd ~/projects/python/junk2_auth

+ start pserve

 : % pserve --reload development.ini

** Start livereload

+ Open Terminal

+ Start virtual env

 : % v p2

+ cd to home folder

 : % cd ~/projects/python/junk2_auth

+ start livereload

 : % livereload

** Open URL

 : 0.0.0.0:6543

Click on the icon to connect to =livereload= server.

** Open Emacs

Edit files in emacs and when u save you should see it reflected in
the browser immediately without having to refresh.

| routes    | <proj>/__init.py__ |
| views     | <proj>/views.py    |
| models    | <proj>/models.py   |
| templates | <proj>/templates/* |
| tests     | <proj>/tests.py    |

* start project
** create

This time lets use =alchemy=, naming our project =pyr1=.

Characters to use: alpha/numeric and '_' only.  Don't use '.'

 : % pcreate -s alchemy pyr1

NOTE: to see a list of project types do:

 : % pcreate --list
** install

#+BEGIN_SRC 
cd pyr1
python setup.py develop
#+END_SRC

** run

 : % pserve development.ini

** set port

In =<proj>/development.ini= we have a section like:

#+BEGIN_SRC conf
[server:main]
host = 0.0.0.0
port = 6543
#+END_SRC

* routes

In =<proj>/<proj>/__init__.py= we put:

#+BEGIN_SRC python
from pyramid.config import Configurator
def main(global_config, **settings):
    config = Configurator(settings=settings)
    config.add_route('hello', '/')
    config.scan()
    return config.make_wsgi_app()
#+END_SRC

This means the root url will resolve to the view: =hello= 

* views

In =<proj>/<proj>/views.py= put:

#+BEGIN_SRC python
from pyramid.response import Response
from pyramid.view import view_config
@view_config(route_name='hello')
def hello_world(request):
    return Response('Hello')
#+END_SRC

* templating
** basics

Extend the view annotation to add a template

#+BEGIN_SRC python
@view_config(route_name='home', renderer='templates/t1.pt')
def my_view(request):
    return {'project': 'annie'}
#+END_SRC

This returns a hashtable to the template with the single key: project,
with it's value being 'annie'.  This can then be used in a template
like so:

 : <h1>Project: ${project}</h1>

** Generic Layout Templates

Often you'll want to have one file that is the generic layout of your
website and it will have sections that get filled in, like the body.
It will define the header/footer/navigation, etc.

To achieve that first lets create the generic layout template in the
file: =<proj>/<proj>/templates/base_layout.pt=

#+BEGIN_SRC html
<html>
  <body>
    <div metal:define-slot="content"></div> 
  </body>
</html>
#+END_SRC

Then we can use this layout template to create an =about us= page.  In
file: =.../templates/about_us.pt= put:

#+BEGIN_SRC html
<div metal:use-macro="load: base_layout.pt">
    <div metal:fill-slot="content">
        <p>Hello World.</p>
    </div>
</div>
<div metal:use-macro="load: base_layout.pt">
  <div metal:fill-slot="content">

  </div>
</div>
#+END_SRC

** Includes

   We will use the examle of having a copyright statement that we want
   to include in many places on our website, but when next year rolls
   around we only want to update it with the new year once.

   In file: =<proj>/<proj>/templates/snippets.pt= put:

#+BEGIN_SRC html
<p metal:define-macro="copyright">
  Copyright 2011, <em>Foobar</em> Inc.
</p>
#+END_SRC
   
   Lets include this in our =about us= page, in file:
   =<proj>/<proj>/templates/about.pt= put:

 : <span metal:use-macro="load: copyright.pt"/>

   Try:
     
 : <span metal:use-macro="container['copyright.pt'].macros.copyright"/>


 : load('032-master-template.pt').macros['title']

* chameleon
** show database query results

Queries return a list of dictionary objects.  Say we have 
a list of friends:

| name   | age |
|--------+-----|
| fenton | 10  |
| annie  | 30  |

#+BEGIN_SRC python
friends = [{"name": "fenton", "age": 10},
           {"name": "annie",  "age": 30}]
#+END_SRC

We use tal:repeat="curr list", where list would be =friends=
in this case, and curr holds the current friend.

You could use this in a table like so:

#+BEGIN_SRC html
<table border=1>
  <tr><th>Name</th><th>Age</th></tr>
  <tr tal:repeat="friend friends">
      <td>${friend.name}</td>
      <td>${friend.age}</td>
  </tr>
</table>
#+END_SRC

You could use it in bulleted list like so:

#+BEGIN_SRC html
<ul tal:repeat="friend friends">
  <li>Name: ${friend.name}, Age: ${friend.age}</li>
</ul>
#+END_SRC

** links

Put something like the following in your template code:

<a href="${request.route_url('write_message')}">Write Message</a>

Where 'write_message' is the name a route defined in =__init.py__"

* database, models, sqlalchemy

  + [[http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/definingmodels.html][reference]]

** Create project
Use the sqlalchemy scaffold:

 : % pcreate -s sqlalchemy <project_name>

** Init the database

The database is setup to use SqlLite to begin with.  This is fine as
as we can move to [[postgresql database]] at a later date.

A script is installed into your virtual environment called:
=initialize_<project_name>_db=.  Run that now like so:

 : % initialize_<proj>_db development.ini

** Add/Change model

Lets create a model called =friend=, which keeps track of
your friends names and ages.

In file: =<proj>/<proj>/models.py= put something like:

#+BEGIN_SRC python
class Friend(Base):
    __tablename__ = 'friends'
    id = Column(Integer, primary_key=True)
    name = Column(Text)
    age = Column(Integer)
 
    def __init__(self, name, age):
        self.name = name
        self.age = age
#+END_SRC

Re-run:

 : % initialize_<proj>_db development.ini

to have your friends table be created.

* add some data

My project is called: =sierraspicevancom=, so replace those
strings with your own project name.

Lets add some data into the database by hand.  First add
the following into =development.ini=

#+BEGIN_SRC conf
[pshell]
m = sierraspicevancom.models
s = sierraspicevancom.models.DBSession
t = transaction
#+END_SRC
```

Now start up the =pshell=

 : % pshell development.ini

Create a 'Friend' object:

#+BEGIN_SRC python
from sierraspicevancom.models import *
friend = Friend(name="fenton",age=10)
session.add(friend)
t.commit()
session.query(Friend).all()
#+END_SRC

* viewing data

Create the basic route, view and template, called: 'show_friends'.  See:  
[[*routes][routes]], [[*views][views]] and [[*templating][templating]] for how to do that.

** The view

The view portion should look like this:

#+BEGIN_SRC python
@view_config(route_name='show_friends', renderer='templates/show_friends.pt')
def show_friends_view(request):
    friends = DBSession.query(Friend).all()
    return {"friends": friends}
#+END_SRC


** commandline test view

Test from the command line (pshell).  

#+BEGIN_SRC python
import sierraspicevancom.views as view
fs = views.show_friends_view(request)
fs
#+END_SRC

The output should basically be quite similar to the 
[[*add%20some%20data][session.query(Friend).all()]] call.

** template

Now lets get the web page showing this, the template should look like:

#+BEGIN_SRC html
These are your friends:<br/>
<table border=1>
  <tr><th>Name</th><th>Age</th></tr>
  <tr tal:repeat="friend friends">
      <td>${friend.name}</td>
      <td>${friend.age}</td>
  </tr>
</table>
#+END_SRC

visit: http://localhost:6543/show_friends to see the results.

(bonus): log into pshell and add another friend, see that the 
web page updates accordingly.

* forms
** overview

Lets now add a form so we can add friends via the web too,
not just throught the pshell/dbalchemy.

Reusing our show friends code.  Lets create a new route, view, 
template that is: 'add_friend'.

** Imports

In our 'views.py' file add the following imports:

#+BEGIN_SRC python
import colander
from deform.form import Form
from deform import ValidationFailure
from pyramid.httpexceptions import HTTPFound
#+END_SRC

[[http://colander.readthedocs.org/en/latest/][Reference Docs]]

For forms we create a Colander schema.  These are the fields that you
want to see on your form.  In our case we'll make a trivial schema
called 'FriendSchema' with two fields: 'name', and 'age'.

** Colander Schema

: views.py

#+BEGIN_SRC python
class FriendSchema(colander.MappingSchema):
    name = colander.SchemaNode(colander.String())
    age = colander.SchemaNode(colander.Integer())
#+END_SRC

All the widgets can be found here:
https://github.com/Pylons/deform/blob/master/deform/widget.py


** View code

Now the view function, =view.py=

#+BEGIN_SRC python
@view_config(route_name='add_person', renderer="templates/add_person.pt")
def add_person_view(request):
    schema = FriendSchema()
    myform = Form(schema, buttons=('submit',))
    return {"form": myform.render()}
#+END_SRC

** Template code

#+BEGIN_SRC html
<div tal:content="structure form">form</div>
#+END_SRC

+ [[http://chameleon.readthedocs.org/en/latest//reference.html#tal-content][tal:content reference]]

Basically the 'structure' keyword just passes through whatever 
is in form.  Allowing you to insert HTML directly.

** Process the post submit

Okay our code only SHOWS the form, it doesn't take the data
and store it in the database!  To do that we'll modify our
view function to look for a post submit like so:

*** Detect POST

#+BEGIN_SRC python
if 'submit' not in request.POST: # process the filled out form
    return {"form": my_form.render()}
else: # process form
#+END_SRC

So we check if there is an element called 'submit' in the 
request.POST array, that is we are receiving the posted 
results of a filled out form, we fall into the 'else:' branch
of the if statement.

*** Validate

The first thing we want to do is VALIDATE our returned data.
That is what our Colander Schema above provides us.  We do that
like so:

#+BEGIN_SRC python
controls = request.POST.items()
try:
    appstruct = my_form.validate(controls)
except ValidationFailure as e:
    return {"form": e.render(), "values": False}
#+END_SRC

So we extract the =items()= from the post.

Then we validate the form: =my_form.validate(...)=

If the validation fails we return the form, but it'll highlight
the errors because of the =ValidationFailure.render()= part.

*** Submit data to database

Okay, assuming the validation passes we'd now like to save our 
result into the database.  We can do that with:

#+BEGIN_SRC python
name = appstruct['name']
age = appstruct['age']
friend = Friend(name,age)
DBSession.add(friend)
#+END_SRC

*** Redirect to show_friends

It nice to see the result of adding a friend in your friend list
so we can redirect there with:

#+BEGIN_SRC python
url = request.route_url('show_friends') 
return HTTPFound(location=url)
#+END_SRC

** Improve the form

Now lets expand the form to modify the =name= field to be a text area.

Adjust the imports:

#+BEGIN_SRC python
from deform.widget import TextAreaWidget
#+END_SRC

Specify the widget to use:

#+BEGIN_SRC python
class FriendSchema(colander.MappingSchema):
    name = colander.SchemaNode(colander.String(),
                               widget=TextAreaWidget(cols=100,rows=10))
#+END_SRC

[[http://deform.readthedocs.org/en/latest/][Reference Docs]]

* Authorization / Authentication
+ [[http://michael.merickel.org/projects/pyramid_auth_demo/intro.html][AA Tutorial]]
* Model, View, Template, and Form

Now lets put together our view and model.  Open 'views.py' 
file.

In the section:

    from .models import (

add our

    Friends,

model.  

** Add route, view, template called: 'add_friend"

see: [[*routes][routes]], [[*views][views]] and [[*templating][templating]] for how to do that.


* testing aug2014

: % mkdir tests
: % touch <proj_root>/<module_name>/tests/test_units.py
: % rm -f <proj_root>/<module_name>/tests.py

#+BEGIN_SRC python -r
from unittest import TestCase
class TestMyViews(TestCase):
    def test1(self):
        a = 1
        self.assertEqual(a, 1)
#+END_SRC 

: % nosetests .

* testing

tutorial reference:

+ http://docs.pylonsproject.org/projects/pyramid_tutorials/en/latest/getting_started/05-tests/index.html

example:

+ http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/tests.html

** install test frameworks

+ Add dependency on =coverage=, =WebTest=, and =nose= in =setup.py=:

#+BEGIN_SRC 
requires = [
    'coverage',# add this
    'nose',    # add this
    ...
    'WebTest', # and this
    ]
#+END_SRC

pull in the dependencies:

 : % python setup.py develop

** run tests

 : % nosetests . 

** integration testing views

Normally we'd like to find a way to test our webapp that doesn't 
require parsing resulting HTML.  Views *DONT* return HTML, but
they return the state that we are interested in testing in a 
programmatically easy format, the =dict= object. 

*** Modify __init.py__

Move your =add_route()= and =scan()= calls to the config object
into a function called: =includeme()=, example:

#+BEGIN_SRC python
def includeme(config):
    config.add_static_view('static', 'static', cache_max_age=3600)
    config.add_route('home', '/')
    config.scan()
#+END_SRC

*** Modify your tests.py

Now update your tests.py =setUp()= to include your [[(ref:includeme)][includeme]]
configuration, from =__init.py__=:

#+BEGIN_SRC python -r
class TestMyViews(unittest.TestCase):
    def setUp(self):
        import my_app
        self.config = testing.setUp()
        self.config.include('my_app')
#+END_SRC 

*NOTE* Change the above code to use your app name instead of =my_app=

*** Setup your test DB

Here we continue the =setUp()= method adding in code to initialize
a testing database.

#+BEGIN_SRC python
class TestMyViews(unittest.TestCase):
    def setUp(self):
        # ... the include code above ...
        from sqlalchemy import create_engine
        engine = create_engine('sqlite:///my_app.sqlite')
        from .models import (
            Base,
            MyModel,
            )
        DBSession.configure(bind=engine)
        Base.metadata.create_all(engine)
    def tearDown(self):
        DBSession.remove()
        testing.tearDown()
#+END_SRC 

Modify the reference to =my_app= to reflect the name of your
application.

*** Test the view

#+BEGIN_SRC python
def test_home_view(self):
    from .views import home_view
    request = testing.DummyRequest()
    with transaction.manager:
        result = home_view(request)
        self.assertEqual(result['name'], "fenton")
#+END_SRC

Import the function name of the view you want to test.

If you are testing an aspect of your view that interacts with the DB,
then run it inside a with transaction.

** security

You may have view code that has security on it like:

#+BEGIN_SRC python
@view_config(permission="user", route_name='write_message', renderer='templates/write_message.pt')
def write_message(request):
    userid = authenticated_userid(request)
    user = DBSession.query(Person).filter(Person.id == userid).one()
...
#+END_SRC

So this test would fail if you just tried to call it like:

#+BEGIN_SRC python
def test_sending_message(self):
    from .views import write_message
    req = testing.DummyRequest()
    with transaction.manager:
        response = view_fn(request)
        self.assertEqual(response, {'greeting':'hello'})
#+END_SRC

To fix this change test to look like:

#+BEGIN_SRC python
def test_sending_message(self):
    from .views import write_message
    req = testing.DummyRequest()
    with transaction.manager:
        self.config.testing_securitypolicy(userid='joe_user', permissive=True)
        response = view_fn(request)
        self.assertEqual(response, {'greeting':'hello'})
#+END_SRC

*NOTE* you can also set =permissive= to =False=, to test the
un-authenticated code path.


* testing - security

Security primarily occurs within the view, as such we test security
as a functional test, since testing the view its a bit harder to mock
out the DB layer.

reference: 
http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/testing.html#using-the-configurator-and-pyramid-testing-apis-in-unit-tests

** the view

We might have a view like:

#+BEGIN_SRC python
def view_fn(request):
    if request.has_permission('edit'):
        raise HTTPForbidden
    return {'greeting':'hello'}
#+END_SRC

** the view test
we can test this like this:

#+BEGIN_SRC python
import unittest
from pyramid import testing
class MyTest(unittest.TestCase):
    def setUp(self):
        self.config = testing.setUp()
    def tearDown(self):
        testing.tearDown()
    def test_view_fn_forbidden(self):
        from pyramid.httpexceptions import HTTPForbidden
        from my.package import view_fn
        self.config.testing_securitypolicy(userid='hank',
                                           permissive=False)
        request = testing.DummyRequest()
        request.context = testing.DummyResource()
        self.assertRaises(HTTPForbidden, view_fn, request)
    def test_view_fn_allowed(self):
        from my.package import view_fn
        self.config.testing_securitypolicy(userid='hank',
                                           permissive=True)
        request = testing.DummyRequest()
        request.context = testing.DummyResource()
        response = view_fn(request)
        self.assertEqual(response, {'greeting':'hello'})
#+END_SRC

** notes

#+BEGIN_SRC python
self.config.testing_securitypolicy(userid='hank', permissive=False)
#+END_SRC

the userid =hank= must correspond to what was used in the =remember=
statement:

#+BEGIN_SRC python
headers = remember(request, person.id)
#+END_SRC

and what is used to lookup the users groups:

#+BEGIN_SRC python
def groupfinder(userid, request):
    person = DBSession.query(Person).filter(Person.id == userid).first()
#+END_SRC


* unit testing

You can unit test against the ORM models with a few caveats.

+ Do not rely on DB created IDs
+ Do not rely on the DB session anywhere, with queries, etc...

You can freely create your ORM objects and they will not hit the DB,
so you can unit test with them.

** Create an ID generator in your test code

DB IDs are handy.  For example I use them in creating an option list
of users that will later be used for looking up email
addresses...this way I don't expose user email address to the web
client. 

** Mock Objects

: pip install mock

good examples here:

http://garybernhardt.github.io/python-mock-comparison/


* testing 2

+ [[http://docs.pylonsproject.org/projects/pyramid/en/latest/tutorials/wiki2/tests.html][Reference]]

** Steps

+ Add dependency to =WebTest= in =setup.py=:

#+BEGIN_SRC 
requires = [
    'pyramid',
    ...
    'WebTest', # add this
    ]
#+END_SRC

+ Get your dependency into your =virtualenv= by:

 : python setup.py develop

+ Run the test

 : python setup.py test -q




* shell

There is a REPL shell: =pshell=

#+BEGIN_SRC shell
pshell development.ini
#+END_SRC

* Not sure where to file yet

** test application from pshell

In the '[pshell]' section of 'development.ini' add:

 : setup = sierraspicevancom.pshell.setup

Now create the file: '<proj>/<proj>/pshell.py' and put the following in it:

#+BEGIN_SRC python
from webtest import TestApp
def setup(env):
    env['request'].host = 'sierra.spicevan.com'
    env['request'].scheme = 'http'
    env['testapp'] = TestApp(env['app'])
#+END_SRC

+ [[http://docs.pylonsproject.org/projects/pyramid/en/latest/narr/commandline.html#extending-the-shell][reference]]

here we get access to a 'TestApp' variable 'testapp' that lets us interact
with our application from the command line.

* Security
** first cut
Initially we are going to create some static security, then we'll
switch things over to using a proper database security.

Put the following into: =<proj>/<app>/__init__.py=


#+BEGIN_SRC python
from pyramid.authentication import AuthTktAuthenticationPolicy
from pyramid.authorization import ACLAuthorizationPolicy
from pyramid.security import Allow, Authenticated, ALL_PERMISSIONS
def groupfinder(user_name, request):
    return ['g:user']
#+END_SRC

here the =groupfinder= function will always return the group =user=.
In the future, we'll use the =user_name= param to query the database for
the groups the user belongs to.  This is why we say the security is
'static' now.

The callback will be passed the value of what you stored with the
=remember= function below.

#+BEGIN_SRC python
class Root(object):
    __acl__ = [
        (Allow, Authenticated, 'view'),      
        (Allow, 'g:user', 'edit'),           
        (Allow, 'g:admin', ALL_PERMISSIONS), 
    ]
    def __init__(self, request):
        self.request = request
#+END_SRC

Next we create a =Root= class that is going to contain our =ACL=
(access control list).  The =ACL= above says:

+ users who are simply =Authenticated=, i.e. in the database,
  regardless of their permissions can =view=.
+ users who are in the group =user=, can =edit=
+ users who are in the group =admin=, have =ALL_PERMISSIONS=.

#+BEGIN_SRC python
def main():
    # ...
    authn_policy = AuthTktAuthenticationPolicy(
        'the_seekrit',
        callback=groupfinder, 
    )
    authz_policy = ACLAuthorizationPolicy()
    config = Configurator(
        authentication_policy=authn_policy,
        authorization_policy=authz_policy,
        root_factory=Root, # here is where we use our Root ACL class
        settings=settings
    )
    # ...
#+END_SRC

** authenticate

In your =views.py= file, your view method should have code like:

#+BEGIN_SRC python 
from pyramid.security import remember, forget
from pyramid.httpexceptions import HTTPFound, HTTPForbidden

@view_config(route_name='login')
def login(request):
    security_cookie_http_header = remember(request, 'joe') 
#+END_SRC

The =remember= function creates http cookie headers that contain the
name =joe=.  So this will get passed back to the application each
time.  Normally this page would be a form that accepts a username and
password and queries the database.  If the DB finds that user, then
we'd create this cookie.  But since this first cut is just a 'static'
website, we simply just create the cookie when we visit the =login=
page. 

#+BEGIN_SRC python
    url = request.route_url('success_page')
    return HTTPFound(url, headers=security_cookie_http_header)
#+END_SRC

Finally we finish off the login method by getting the created cookie
sent back to the users browser, so it can be passed for all
subsequent calls.

** Authorize (ACL)

Now we've created a security cookie that will be passed back with each
additional request to the server.  When a piece of view code has a
permission set like so:

#+BEGIN_SRC python
@view_config(route_name='edit_customer', permission='edit', renderer='templates/add_friend.pt')
def edit_customer_view(request):
    return {}
#+END_SRC

The first thing that happens is the group callback function:
=groupfinder=, specified in =__init.py__= is called.  The function
will be passed the username you stored with the =remember()=
function, in the login page.  We just put =joe= in for now.

The next step is the =ACL=, which is a list of tuples in =__init.py__=,
is examined.

This tuple has three elements.  

#+ATTR_HTML: border="2" rules="all" frame="border"
| Allow/Deny | user/group | permission |

The first indicates whether to =Allow= or =Deny=.  The second element
is the *who*, so it could be your username, it could be a group you
belong to, or it could simply be any =Authenticated= user.  The last
part is the permission name.  This is the name you put above your view
function, with the =permission= parameter.

In the above example we marked the view function with the =edit=
permission.  So from the =ACL= we see that the rule is to =Allow=
people who belong to the group: =user=.  So now the username =joe= is
passed to the =groupfinder= callback function.  This function will
return a list of groups =joe= belongs to.  If the string =g:user= is
returned, he'll be allowed in.

** logout / de-authorize

Use the =forget()= function to create headers that will cause the 
auth cookie to be expired:

#+BEGIN_SRC python
@view_config(route_name='logout')
def logout(request):
    headers = forget(request)
    loc = request.route_url('logout_success')
    return HTTPFound(location=loc, headers=headers)
@view_config(route_name='logout_success', renderer='templates/logout_success.pt')
def logout_success(request):
    return {}
#+END_SRC

** Retrieve user id

Since this is a web-app, and therefore stateless, if we need to 
figure out which user is making any given request, we can do so 
by putting the following in your view/template code:

#+BEGIN_SRC python
name = authenticated_userid(request)
#+END_SRC

This will parse the cookie header passed into the server and extract
the name value.


** some code

Here is a longer sample:

#+BEGIN_SRC python 
# ----- SOME VIEWS -----
@view_config(route_name='home')
def home(request):
    msg = 'Home page open to ANYONE!'
    return Response(msg)
@view_config(route_name='employee_login')
def employee_login(request):
    headers = remember(request, 'joe')
    url = request.route_url('company')
    return HTTPFound(url, headers=headers)
@view_config(route_name='company', permission='employee')
def company(request):
    msg = 'This is the company page.<b/>'
    msg += 'To see this page you must simply be authenticated'
    return Response(msg)
@view_config(route_name='logoff')
def logoff(request):
    headers = forget(request)
    loc = request.route_url('home')
    return HTTPFound(location=loc, headers=headers)

# normally use userid to lookup group list
def groupfinder(userid, request):
    return ['g:employee']
class Root(object):
    __acl__ = [(Allow, Authenticated, 'employee'),]
    def __init__(self, request):
        self.request = request
def main():
    authn_policy = AuthTktAuthenticationPolicy(
        'the_seekrit',
        callback=groupfinder,
    )
    authz_policy = ACLAuthorizationPolicy()
    config = Configurator(
        authentication_policy=authn_policy,
        authorization_policy=authz_policy,
        root_factory=Root,
    )
    # ... the rest of your main code
#+END_SRC



#+OPTIONS: ^:nil
* i18n

use python 2.7, 

see: http://paste.ubuntu.com/7504252/

and: http://paste.ubuntu.com/7504260/

** pre-requisits

on arch linux get 'gettext':

#+BEGIN_SRC shell
sudo pacman -S gettext
#+END_SRC
** Definitions

Ensure you have a 'locale' folder under your main project root:

#+BEGIN_SRC 
`-- junk2_auth
    `-- junk2_auth
        `-- locale
#+END_SRC

+ extract_messages -> *.pot

Now you can create your *.pot file with:

 : (p2)% pot-create junk2_auth -o junk2_auth.pot 

Move the file to where you want it:

 : (p2)% mv junk2_auth.pot junk2_auth/locale/

#+BEGIN_SRC 
`-- junk2_auth
    `-- junk2_auth
        `-- locale
            `-- junk2_auth.pot
#+END_SRC

When you run 'extract message', a =*.pot= file is created.  Don't edit
it.  It just has all your strings, but no connection to a given
language yet.

+ init_catalog -> *.po

Now you can create files, from the =*.pot= file, for a given 
language.  Below we use french =fr=.  These *.po files are what
your translators will edit.

*NOTE*: you only do this =init_catalog= step once per language.
Subsequent times use =update_catalog= or you will over-write
existing translations!

*NOTE*: use python 2.x not 3.x!!!

#+BEGIN_SRC 
(p2)pyr1 % mkdir -p pyr1/locale/zh/LC_MESSAGES/
(p2)pyr1 % msginit --no-translator --locale=zh --input=pyr1/locale/pyr1.pot -o pyr1/locale/zh/LC_MESSAGES/pyr1.po
#+END_SRC

 : (p2)% python setup_i18n.py init_catalog -l fr

#+BEGIN_SRC 
junk2_auth
`-- locale
    |-- fr
    |   `-- LC_MESSAGES
    |       `-- junk2_auth.po
    `-- junk2_auth.pot
#+END_SRC

+ update_catalog *.pot -> *.po

 : (p2)% python setup_i18n.py update_catalog -l fr

+ compile_catalog *.po -> *.mo

=*.mo= files are *machine* files, which are compiled from your
=*.po= files.  You run this anytime you have new translations.

 : (p2)% python setup_i18n.py compile_catalog -l en 

#+BEGIN_SRC 
junk2_auth
`-- locale
    |-- fr
    |   `-- LC_MESSAGES
    |       |-- junk2_auth.mo
    |       `-- junk2_auth.po
    `-- junk2_auth.pot
#+END_SRC

** setup_i18n.py

Babel and other packages for extracting translation strings
doesn't work with Python 3, only Python 2.  So when we are
working with i18n we use a terminal that is using a Python 2
virtualenv.

Create a file, =setup_i18n.py= that contains the following:

#+BEGIN_SRC python
from setuptools import setup, find_packages
requires = [
    'Babel',
    'lingua',
]
setup(name='my_project',
      packages=find_packages(),
      install_requires=requires,
      message_extractors={'.': [
          ('**.py', 'lingua_python', None),
          ('**.pt', 'lingua_xml', None),
          ]},
)
#+END_SRC

first time you must run:

#+BEGIN_SRC shell
python setup_i18n.py develop
#+END_SRC

Now you can run the various 

#+BEGIN_SRC shell
python setup_i18n.py extract
python setup_i18n.py update
python setup_i18n.py compile
#+END_SRC

catalog commands.

** In templates

#+BEGIN_SRC html
<html xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      i18n:domain="junk2_auth">
  <body>
    <h2 i18n:translate="search_documentation">Search documentation</h2>
  </body>
</html>
#+END_SRC

make sure the =domain= matches folder where your *.pot files is.

** add the translation dir

in =__init.py__= put:

#+BEGIN_SRC python
config.add_translation_dirs('junk2_auth:locale/')
#+END_SRC

best is probably in the =includeme(config)= function

** activate a locale

in view you can do:

#+BEGIN_SRC python
request._LOCALE_ = 'fr'
#+END_SRC

or set a cookie:

#+BEGIN_SRC python
response = Response()
loc = request.route_url('home')
response.set_cookie('_LOCALE_',
                    value='fr',
                    max_age=31536000)  # max_age = year
return HTTPFound(loc, headers=response.headers) 
#+END_SRC

* debugging
** instrument
#+BEGIN_SRC python
import pdb
pdb.set_trace()
#+END_SRC

** pudb

pudb doesn't seem to work?

#+BEGIN_SRC shell
pip install pudb 
#+END_SRC

#+BEGIN_SRC python -r
from pudb import set_trace as trace
trace() (ref:trace)
#+END_SRC

Just stick your [[(ref:trace)][trace()]] command wherever you want your PuDB debugger
to stop (a breakpoint).

** PuDB Cheatsheet

You can inspect (drill into) variables in the top right box with =\= key.
* Setup pyramid on new machine

Ensure you have virtualenv configured.

Install pyramid inside a virtual environment.

#+BEGIN_SRC shell
# Install C-extensions for python
sudo pacman -S cython cython2
pip install pyramid
#+END_SRC

* postgresql database

** packages
Ensure correct python packages are installed:

#+BEGIN_SRC 
pip install psycopg2
#+END_SRC

** create user/db
if required: [[file:~/projects/docs-DIR/documentation/postgresql.org::*New%20user%20&%20database][Create new postgresql user & database]]

** config
fill in the sqlalchemy.url parameter in =development.ini=:

#+BEGIN_SRC python
# sqlalchemy.url = postgresql://[user]:[passwd]/[db-name]
sqlalchemy.url = postgresql://pyr1:welcome1@localhost/pyr1-db
#+END_SRC

** init the DB

#+BEGIN_SRC
% initialize_pyr1_db development.ini
#+END_SRC

Start server and ensure it works.

#+BEGIN_SRC 
% pserve development.in
#+END_SRC

In a browser navigate to:

http://0.0.0.0:6543/
* deform

http://deformdemo.repoze.org/
* production deployment

Log into server

: v3h

change into the project directory

: cd projects/python/pyr1

pull the latest changes

: g fetch_pull

activate virtual env

: v pyr

update any DB modifications

: initialize_pyr1_db db_init_prod.ini

restart the pserve(s)

: sudo supervisorctl
: supervisor> restart sh:*
: supervisor> quit 
