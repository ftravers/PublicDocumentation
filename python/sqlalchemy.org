docs: http://docs.sqlalchemy.org/en/rel_0_9/

* interact from command line

run =python= and do the following:

#+BEGIN_SRC python
from sqlalchemy import *
from sqlalchemy import create_engine
from sqlalchemy import Table, Column, Integer, String, MetaData, ForeignKey
from sqlalchemy.orm import mapper, sessionmaker, relationship, backref
from sqlalchemy.orm import sessionmaker
db = create_engine('postgresql://pyr1-user:welcome1@localhost/pyr1-db', echo=True)

#+END_SRC

* Simple

#+BEGIN_SRC python
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    name = Column(Text)
    def __init__(self, name):
        self.name = name
#+END_SRC

* relationships
** Detailed
*** Linking tables one-to-many

+ ForeignKey

#+BEGIN_SRC python
class User(Base):
    __tablename__ = 'users'    
    id = Column(Integer, primary_key=True)

class EmailAddy(Base):
    __tablename__ = 'email_addy'
    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.id')
#+END_SRC

The above class introduces the =ForeignKey= construct, which is a
directive applied to Column that indicates that values in this column
should be *constrained to be values present in the named remote column*.


+ Relationship

Now at the model level if we have an =EmailAddy= and we want to find
out the user associated with this email address, then we create a
*Relationship* 

The relationship can be specified on either model.

#+BEGIN_SRC python
class EmailAddy(Base):
    ...
    user = relationship("User", backref=backref('addresses'))
#+END_SRC

or you can specify from the =User= class:

#+BEGIN_SRC python
class User(Base):
    ... 
    addresses = relationship("Address", backref="user")
#+END_SRC

*** Many-to-many

Say our model has blog posts and tags.  Say I have a few blog entries
titled, and tagged as follows:

| Title                  | Tags                    |
|------------------------+-------------------------|
| "Java is too verbose!" | 'java', 'programming'   |
| "Python just works!"   | 'python', 'programming' |

Each blog post links to *many* tags.  And also each tag may connect to
*many* blog entries.

#+BEGIN_SRC python
class BlogEntry(Base):
    __tablename__ = 'blog_entry'    
    id = Column(Integer, primary_key=True)
    title = Column(String)
    body = Column(String)
    
class Tag(Base):
    __tablename__ = 'tags'
    id = Column(Integer, primary_key=True)
    name = Column(String)
#+END_SRC

+  blog_entries
|----+----------------------+------|
| id | title                | body |
|----+----------------------+------|
|  1 | Java is too verbose! | ...  |
|  2 | Python just works!   | ...  |

+ tags
|----+-------------|
| id | name        |
|----+-------------|
|  1 | java        |
|  2 | programming |
|  3 | python      |

Now we *can't* make a column in either of these tables to hold a list
of the other model, since that is not /normalized/.  We have to create
a third object, an =Association Table=, like so:

+ blog_tags

| blog_id | tag_id |
|---------+--------|
| 1       | 1      |
| 1       | 2      |
| 2       | 2      |
| 2       | 3      |

We do this like so:

#+BEGIN_SRC python
blog_tags = Table('blog_tags', Base.metadata,
    Column('blog_id', Integer, ForeignKey('blog_entries.id')),
    Column('tag_id', Integer, ForeignKey('tags.id'))
)
#+END_SRC

This *constrains* these columns, now we need to get to the tags from
the blog entries and vice-versa.

#+BEGIN_SRC python
class BlogEntry(Base):
    ...
    tags = relationship('Tag', secondary=blog_tags, backref='blog_entries')
#+END_SRC

We only define the relationship on one side, since it is
bi-directional, it allows:

#+BEGIN_SRC python
be = BlogEntry(title='Java is too verbose!')
tag1 = 'java'
tag2 = 'programming'
be.tags.append(tag1)
be.tags.append(tag2)
tag1.blog_entries # [(BlogEntry:1)]
be.tags # [(Tag:1), (Tag:2)]
#+END_SRC

The defining feature of a many-to-many relationship is the =secondary=
keyword argument which references a Table object representing the
association table. 

This table *only contains columns which reference the two sides* of
the relationship; if it has any other columns, such as its own primary
key, or foreign keys to other tables, SQLAlchemy requires a different
usage pattern called the “association object”

** Succint / Reference

*** one to one

http://docs.sqlalchemy.org/en/rel_0_9/orm/relationships.html#one-to-one


class Parent(Base):
    __tablename__ = 'parent'
    id = Column(Integer, primary_key=True)
    child_id = Column(Integer, ForeignKey('child.id'))
    child = relationship("Child", backref=backref("parent", uselist=False))

class Child(Base):
    __tablename__ = 'child'
    id = Column(Integer, primary_key=True)

*** One to many

User may have multiple email addresses:

#+BEGIN_SRC python
class User(Base):
    __tablename__ = 'users'
    id = Column(Integer, primary_key=True)
    emails = relationship("Email", backref="user")
class Email(Base):
    __tablename__ = 'emails'
    id = Column(Integer, primary_key=True)
    email = Column(String)
    user_id = Column(Integer, ForeignKey('users.id'))
u = User()
u.emails = [Email(email="abc.com")]
#+END_SRC

*** Many to many

#+BEGIN_SRC python
person_house_table = Table('person_house', Base.metadata,
    Column('person_id', Integer, ForeignKey('people.id')),
    Column('house_id', Integer, ForeignKey('houses.id'))
)
class Person(Base):
    __tablename__ = 'people'
    id = Column(Integer, primary_key=True)
    houses = relationship("House",
                    secondary=person_house_table,
                    backref="people")
class House(Base):
    __tablename__ = 'houses'
    id = Column(Integer, primary_key=True)
#+END_SRC

* delete

To drop all data from a table:

#+BEGIN_SRC python
conn.execute(addresses.delete()) 
#+END_SRC
* query

#+BEGIN_SRC python
q = session.query(User).filter(User.name == 'fred',
User.password == 'abc')
session.query(q.exists())
#+END_SRC
