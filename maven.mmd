CSS: style.css

# Quick Cookbooks

## Creating Maven Projects

jar project:

mvn archetype:create -DgroupId=com.test -DartifactId=mytest

war project:

<pre><div class="sample_code">mvn archetype:generate -B -DarchetypeArtifactId=maven-archetype-webapp -DgroupId=<span class="parameter">com.mycompany.app</span> -DartifactId=<span class="parameter">my-app</span></div></pre>

## Processing Resources

    mvn resources:resources -P<env>
    mvn resources:testResources -P<env>

* Attach the source and javadoc to an installation or deployment

    mvn clean javadoc:jar source:jar install

* Set up Maven to automatically also get the source and javadoc attachments and register them properly with Eclipse?

    mvn eclipse:eclipse -DdownloadSources -DdownloadJavadocs


# Download & Extract

-   Goto: `http://www.codehaus.org` or
    `http://www.apache.org/dyn/closer.cgi/maven/binaries/apache-maven-2.2.1-bin.zip`

-   Click HTTP link to download file

![image](images/maven_pics/02_maven.gif)
-   To install maven there are a few steps. Extract the software and put
    it in one of the following locations depending on your environment:

* ![image](images/windows.jpeg) Copy file to c:bin and unzip it
there* ![image](images/mac.jpeg) Extract to a folder like:
    ~/bin/maven-2.2.1

( ‘~’ or tilde is a shortcut for your home directory. My home directory
is: `/home/fentontravers`, yours will be `/home/[yourUserId]`)

# Set Environment Variables

## Windows

![image](images/windows.jpeg)
-   Right-click My Computer. Go to Advance tab and click Environment
    Variables.

-   Set JAVA_HOME variable. Example Click New.
    `Variable name: JAVA_HOME, Value:C:\Program Files\Java\jdk1.6.0_14`

![image](images/maven_pics/03a_maven.gif)
-   Edit Path variable by appending `C:\bin\apache-maven-2.2.1\bin` at
    the end

![image](images/maven_pics/04_maven.gif)
-   Go to command prompt and type `mvn` to ensure Maven can be used

![image](images/maven_pics/06_maven.gif)
## Mac

![image](images/mac.jpeg)

-   Edit the file: ~/bash_profile adding:

## m2eclipse

m2eclipse Core Update Site: `http://m2eclipse.sonatype.org/sites/m2e`

is a good plugin for maven into eclipse, make sure to [set a jdk for the
jvm](http://wiki.eclipse.org/Eclipse.ini#Specifying_the_JVM)

## Eclipse Setup

You will tell eclipse *once* where your maven repository is with the
following command: (ensure that Eclipse is not running)

    mvn -Declipse.workspace=<eclipse workspacle> eclipse:add-maven-repo

example:

    mvn -Declipse.workspace=/home/ft/workspaces/wksp1/ eclipse:add-maven-repo

search terms: eclipse environment variable setup

OR

![image](images/maven_pics/07_maven.gif)

# Maven Commands
Compile your test files

    mvn test-compile

create your jar file

    mvn package

-   create a website

    mvn site

-   deploy to the web server

    mvn site-deploy

-   deploy jar file to repo

    mvn jar-deploy

p(#release)

-   doing a release with maven:

    mvn release:prepare
    mvn release:perform

If your release:prepare fails, you may need to issue something like:

    mvn release:prepare -Dresume=false

If you want release numbers to be automatically chosen add a `-B` flag:

    mvn release:prepare -B

## Cargo

You can use cargo to deploy to your app server...like tomcat.

## Excluding unwanted transitive dependencies

When you start using maven you’ll begin adding dependencies to your pom.
Recently I wanted to use Axis2 to call a web service.

    <plugin>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-dependency-plugin</artifactId>
    </plugin>

run it:

    mvn clean install dependency:tree 

or (easier to tokenize in excel sheet)

    mvn clean install dependency:list   

## Distribution Management

Distribution management takes care of publishing your artifacts (jar
files) and site to the internet. The `<scm>` is included here because
when you release your artifacts with the maven release pluggin, it
checks in and tags it for you. The extension required for ssh is
indicated below.

= source code management (repository/vcs).
= will be the link displayed to people to download

your code.

= where your website gets deployed to
= where your artifact gets deployed to

    <project...>
    ...
        <scm>
            <developerConnection>scm:git:ssh://git@linux1.hk.oracle.com/jsonUtility.git</developerConnection>
        </scm>
        <distributionManagement>
            <downloadUrl>http://linux1.hk.oracle.com/maven2/${project.groupId}/${project.name}/${project.version}
            </downloadUrl>
            <site>
                <name>${project.name}</name>
                <id>linux1</id>
                <url>scpexe://linux1.hk.oracle.com/var/www/html/${project.name}</url>
            </site>
            <repository>
                <id>linux1</id>
                <url>scpexe://linux1.hk.oracle.com/var/www/html/maven2/</url>
            </repository>
            <snapshotRepository>
                <id>linux1</id>
                <url>scpexe://linux1.hk.oracle.com/var/www/html/maven2/</url>
            </snapshotRepository>
        </distributionManagement>
           <build>
            <finalName>${project.name}</finalName>
            <extensions>
                <extension>
                    <groupId>org.apache.maven.wagon</groupId>
                    <artifactId>wagon-ssh-external</artifactId>
                    <version>1.0-beta-6</version>
                </extension>
            </extensions>

this needs to be matched with a ~/.m2/settings.xml file

    <settings xmlns="http://...
      <servers>
        <server>
          <id>linux1</id>
          <username>root</username>
        </server>
      </servers>
    ...
    </settings>

~/.m2/settings.xml

    <?xml version=“1.0” encoding=“UTF-8”?>
    <crmod.password>abc123</crmod.password>
    <crmod.username>ONGS-CRMOD-HRMS-STAGE_WW@oracle.com</crmod.username>
    <crmod.username>ongs/Fenton.travers@oracle.com</crmod.username>

## Generate and Deploy javadocs

    mvn site

put this in the pom.xml:

    <project>
        <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <!-- Restrict execution of source compilation to install -->
                                <phase>install</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>
    </project>

## Source code included in jar

    <project>
        <build>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                            <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

Then execute the following to create the source jar file:

    mvn source:jar

## Create Project

-   Go to your code development folder. Mine is located at `~/projects`

-   Execute the following command replacing `com.mycompany.app` with the

domain name and app name, then change the artifact id to something
like `app-web`. This will create a folder called `app-web` in your
code development folder.  Later we'll show how to create your own [Custom Archetype][]

### Generic

Simple Java project, suitable for JAR generation. Maven 2 default.

    mvn archetype:generate -B -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-quickstart -DarchetypeVersion=1.1 -Dversion=1.0 -DgroupId=com.oracle.git.ngsp -DartifactId=ossoCrmodTester -Dpackage=com.oracle.git.ngsp

Parameter
Meaning
package
This is the java package the classes will be created in
version
This is the starting version number to use for release management
artifactId
This is what your jar will be called
-B
Is non-interactive mode
### Web

Creates a web application project (WAR), with a simple Hello World JSP.

    mvn archetype:generate -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false -DgroupId=com.mycompany.app -DartifactId=my-app

### Jersey Spring Web-App

    mvn archetype:generate -DgroupId=grp -DartifactId=art -Dversion=1.0-SNAPSHOT -Dpackage=grp -DarchetypeArtifactId=jersey-quickstart-webapp -DarchetypeVersion=1.5 -DarchetypeCatalog=http://download.java.net/maven/2 -DarchetypeGroupId=com.sun.jersey.archetypes --batch-mode

### J2EE

Creates a J2EE project (EAR), with directories and subprojects for the
EJBs, servlets, etc.

    mvn archetype:generate -DarchetypeArtifactId=maven-archetype-j2ee-simple -DinteractiveMode=false -DgroupId=com.mycompany.app -DartifactId=my-app

### Layer a simple site on top of existing project

maven-archetype-site-simple is an archetype which contains a sample
Maven simple site. This archetype can be layered upon an existing
Maven project.

    mvn archetype:generate -DarchetypeGroupId=org.apache.maven.archetypes -DarchetypeArtifactId=maven-archetype-site-simple -DarchetypeVersion=1.1

### Custom Archetypes

Custom archetypes let you build your own archetypes.  If you want to
automate the setting up of a project with a maven archetype this is
what you'd use.

ref: 

* [http://maven.apache.org/guides/mini/guide-creating-archetypes.html](http://maven.apache.org/guides/mini/guide-creating-archetypes.html)
* [more...](http://stackoverflow.com/questions/2786966/how-to-create-empty-folders-with-maven-archetype)
* [more...](http://blogs.mikeci.com/2010/01/14/working-with-custom-maven-archetypes-part-1/)

#### Step 1: Quickstart.

Get into a test directory:

    cd ~/projects/archetypes

Execute the following command.  Note: change the `groupId` and
`artifactId` to be what you want your archetype to be called.

    mvn archetype:generate -B -DarchetypeArtifactId=maven-archetype-archetype -DgroupId=com.oracle.git    -DartifactId=addTesting-archetype -Dversion=0.0.1-SNAPSHOT

Once you’ve created the sample edit the pom.xml at:

     ~/projects/archetypes/addTesting-archetype/src/main/resources/archetype-resource/pom.xml

it should be modified to look like:

    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
      <modelVersion>4.0.0</modelVersion>
      <groupId>${groupId}</groupId>
      <artifactId>${artifactId}</artifactId>
      <version>0.0.1-SNAPSHOT</version>
    </project>

Rename the archetype.xml into archetype-metadata.xml, (the former is
for Archetype 1.0.X, the later is for Archetype 2.0.X).

    cd src/main/resources/META-INF/maven/
    mv archetype.xml archetype-metadata.xml

Our folder structure now looks like:

    ~/projects/archetypes/addTesting-archetype$ tree .
    .
    |-- pom.xml
    `-- src
        `-- main
            `-- resources
                |-- archetype-resources
                |   |-- pom.xml
                |   `-- src
                |       |-- main
                |       |   `-- java
                |       |       `-- App.java
                |       `-- test
                |           `-- java
                |               `-- AppTest.java
                `-- META-INF
                    `-- maven
                        `-- archetype-metadata.xml


Change directory back to your project root

    cd ~/projects/archetypes/addTesting-archetype

Install your archetype so it can be used

    mvn install

Then you can build a new project based on this archetype.  Change back
to a temp folder

    cd ~/projects/archetypes

Run the archetype:generate maven command:

    mvn archetype:generate -B -DarchetypeGroupId=com.oracle.git -DarchetypeArtifactId=addTesting-archetype -DarchetypeVersion=1.0-SNAPSHOT -DgroupId=com.acme -DartifactId=testProject -Dpackage=com.acme.testProject

#### Adding some files

Say we want to create an archetype that sets up logback logging for
us.  There are two config files we'll want added in our project, so
lets add them in the following locations:

    cd ~/projects/archetypes/addTesting-archetype/src/main/resources/archetype-resources/src/
    mkdir main/resources; touch main/resources/logback.xml
    mkdir test/resources; touch test/resources/logback-test.xml

Edit the contents of the logback.xml files as per:
[java](java.html#Logging).  Finally update the pom.xml to include a
reference to the logging library dependencies.

    cd ~/projects/archetypes/addTesting-archetype/src/main/resources/archetype-resources/





More refs:

-   [http://blogs.mikeci.com/2010/01/14/working-with-custom-maven-archetypes-part-1/](http://blogs.mikeci.com/2010/01/14/working-with-custom-maven-archetypes-part-1/)

## Eclips’ify

`cd` into the `app-web` folder and make your project suitable for
using with eclipse

    cd app-web
    mvn eclipse:clean eclipse:eclipse 

![image](images/maven_pics/08_maven.gif)
![image](images/maven_pics/09_maven.gif)

## Import the project into Eclipse

File > Import > General > Existing Projects into Workspace

## Update your pom.xml

pom.xml file should be updated as in [Reference](#reference)

Do this after you make any changes to your `pom.xml` file.

## Installing JAR to local Repo

Installing a zip/jar to your local repository

    mvn install:install-file -DgroupId=<your_group_name>  -DartifactId=<your_artifact_name>  -Dversion=<snapshot>  -Dfile=<path_to_your_jar_file> -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

example:

    mvn install:install-file -DgroupId=com.oracle.stellent -DartifactId=ridc -Dversion=10.3 -Dfile=oracle-ridc-client-10g.jar -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

## Installing to local repository

If you have a maven project you can install it directly into your repo
with:

    mvn install -DcreateChecksum=true

## Create Public Repo

Setting up a public maven repository

Sometimes you have artifacts that you want to share with people but
public repositories don’t have that jar file. These people may be on the
other side of the world, so you need to create a publicly accessible
place for them to get the jars.

-   Create the jars in your local repo according to the steps in this
    document. Make sure to create the checksums with that flag.
-   rsync the parts of your local repo you want to go up there. Below
    I’ll use the example of a file called server.jar (this is the
    stellent server.zip file, just renamed to server.jar)

### Copy the jar into your local repo

    mvn install:install-file -DgroupId=com.oracle.stellent -DartifactId=server -Dversion=10.3 -Dfile=server-10.3.jar -Dpackaging=jar -DgeneratePom=true -DcreateChecksum=true

### rsync this to your public web server

    rsync -avP --stats ~/.m2/repository/com spiceman@spicevan.com:/home/spiceman/files.spicevan.com/maven2

## Accessing Your Public Repo

### include the references in the pom.xml file

    <dependencies>
      <dependency>
        <groupId>com.oracle.stellent</groupId>
        <artifactId>server</artifactId>
        <version>10.3</version>
      </dependency>      
    </dependencies>
    <repositories>
      <repository>
        <id>spicevan</id>
        <url>http://files.spicevan.com/maven2/</url>
      </repository>
    </repositories>

That should be all that is required.

## Assemble all dependent jars into one package

The following will assemble all dependent jars into a single jar file
AND specify a main class (i.e. create an executable jar).

    <build>
      <finalName>server-assist</finalName>
      <pluginManagement>
        <plugins>
          <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>2.2-beta-5</version>
            <configuration>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
              <archive>
                <manifest>
                <mainClass>com.oracle.ngsp.controller.Controller</mainClass>
                </manifest>
              </archive>
            </configuration>
            <executions>
              <execution>
                <id>make-my-jar-with-dependencies</id>
                <phase>package</phase>
                <goals>
                  <goal>single</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </pluginManagement>
    </build>

Run with:

`mvn assembly:assembly` or
`mvn -Ptest assembly:assembly -Dmaven.test.skip=true` to avoid running
the tests...the tests may depend on a setting that is only valid in the
development environment and the `-Ptest` flag will load up the test
profile settings which can break the tests. This way you shut off that
step and can still build your uber jar.

You can also SKIP TESTS with the following:

    <properties>
      <maven.test.skip>true</maven.test.skip>
    </properties>

The above will also specify that the resultant jar execute the main
method of: `com.oracle.ngsp.controller.Controller` (an executable jar)
with the following command:

    java -jar server-assist.jar 

# Reference

## 

The scope tag is used to decide where to put jars and when to use
dependent jars. Jars will always be used for compliling. However
sometimes you want to actually package the jars into

-   compile: packaged, default scope, available in all classpaths
    (compilation, testing, and during execution)
-   runtime: packaged, required to run, but not compile
-   test: not packaged, only during testing
-   provided: not packaged, otherwise like compile

## Compilation Version 1.4, 1.5, 1.6

I need to compile some of my Maven projects to be JDK 1.4 compatible,
some for JDK 1.5 or JDK 1.6. To do this in Maven is very straight
forward since I have different pom.xml for different applications.

I write my code using JDK 1.5 syntax but I need the library to be JDK
1.4 compatible, so here is my configuration.

    <build>
        <finalName>Tailor</finalName>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>2.0.2</version>
                    <configuration>
                        <source>1.5</source>
                        <target>1.5</target>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

you can use: `jsr14, 1.5, or 1.6` as values for `source` or `target`

## Fentons Personal Maven Repository

The following is Fentons personal repository:

    <repositories>
      <repository>
        <id>spicevan</id>
        <url>http://files.spicevan.com/maven2/</url>
      </repository>
    </repositories>

## Dependencies

### JPA – Java Persistence API

#### Eclipselink


 
 org.eclipse.persistence
 eclipselink
 2.0.0
 compile
 ...
 

 ...

 
 EclipseLink Repo

http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo
 
 ...

### Database

Here is a good page of dependency info:
[http://docs.codehaus.org/display/TRAILS/DatabaseConfigurations](http://docs.codehaus.org/display/TRAILS/DatabaseConfigurations)

#### Derby

    <dependency>
        <groupId>org.apache.derby</groupId>
        <artifactId>derby</artifactId>
        <version>10.5.3.0_1</version>
        <type>jar</type>
        <scope>compile</scope>
    </dependency>

#### Oracle JDBC (java 1.6)

*Note* - Requires adding: [Fentons Personal Maven
Repository](#personal_repo).

The following versions are available: `db11gR2java16`, `db11gR2java15`,
and `db10gR2java1415`. Just substitute the version section below to get
the correct version.

    <dependencies>
      <dependency>
        <groupId>com.oracle.database</groupId>
        <artifactId>ojdbc</artifactId>
        <version>db11gR2java16</version>
      </dependency>      
    </dependencies>

#### MySQL

    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>5.1.9</version>
    </dependency>

#### MS SQL Server

    <dependency>
        <groupId>net.sourceforge.jtds</groupId>
        <artifactId>jtds</artifactId>
        <version>1.2</version>
    </dependency>

### Content Server

#### 10.3

*Note* - Requires adding: [Fentons Personal Maven
Repository](#personal_repo).

    <dependencies>
      <dependency>
        <groupId>com.oracle.stellent</groupId>
        <artifactId>server</artifactId>
        <version>10.3</version>
      </dependency>      
    </dependencies>

### JUnit

    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.8.1</version>
    </dependency>

## Sample pom.xml file

Take the components from the example below and add them into your
`pom.xml`. Here is an explanation of what is what.

-   junit: testing

You will have an old version of junit in your pom, just get rid of the
whole old junit.

-   jsf-api, jsf-impl, standard, jstl: all required for JSF 2.0

-   maven-eclipse-plugin: allows you to work with Eclipse Web Tools

-   maven-compiler-plugin: does code compilation for you

        <repositories>
            <repository>
                <id>maven2-repository.dev.java.net</id>
                <name>Java.net Repository for Maven</name>
                <url>http://download.java.net/maven/2</url>
            </repository>
        </repositories>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.1</version>
            </dependency>
            <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-api</artifactId>
                <version>2.0.2</version>
            </dependency>
            <dependency>
                <groupId>com.sun.faces</groupId>
                <artifactId>jsf-impl</artifactId>
                <version>2.0.2</version>
            </dependency>
            <dependency>
                <groupId>taglibs</groupId>
                <artifactId>standard</artifactId>
                <version>1.1.2</version>
            </dependency>
            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>jstl</artifactId>
                <version>1.1.2</version>
            </dependency>
        </dependencies>
        <build>
            <finalName>Tailor</finalName>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>2.0.2</version>
                        <configuration>
                            <source>1.5</source>
                            <target>1.5</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-eclipse-plugin</artifactId>
                        <version>2.7</version>
                        <configuration>
                            <downloadSources>false</downloadSources>
                            <wtpversion>2.0</wtpversion>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
        </build>

# Profiles

Profiles allow you to create a project/build that will work across
environments such as development, test and production. In the following
example we use the case of database connection properties. These are
different for each environment and we handle this difference by putting
the different values into the pom.xml. Then in our persistence.xml we
place the variable place holders that will get replaced once we build
the project.

## Update pom.xml

In your pom.xml put:

    <project>
    ...
        <properties>
            <jdbc.driver>com.mysql.jdbc.Driver</jdbc.driver>
            <jdbc.url>jdbc:mysql://localhost:3306/stellent1</jdbc.url>
            <jdbc.username>stellent1user</jdbc.username>
            <jdbc.password>welcome1</jdbc.password>
        </properties>
        <profiles>
            <profile>
                <id>production</id>
                <properties>
                    <jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
                    <jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
                    <jdbc.username>ftravers</jdbc.username>
                    <jdbc.password>welcome1</jdbc.password>
                </properties>
            </profile>
        </profiles>
        <build>
            <finalName>myProject</finalName>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>2.3</version>
                        <configuration>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
            <resources>
                <resource>
                    <directory>src/main/resources</directory>
                    <filtering>true</filtering>
                </resource>
            </resources>
        </build>
    </project>

## persistence.xml

p.(filelocation) src/main/resources/META-INF/persistence.xml

    <?xml version="1.0" encoding="UTF-8"?>
    <persistence
    ...
    version="1.0">
        <persistence-unit name="myProjectPersistenceUnit">
            <class>com.leveltree.stellent.serverassist.database.Revision</class>
            <class>com.leveltree.stellent.serverassist.database.DocMeta</class>
            <properties>
                <property name="javax.persistence.jdbc.driver" value="${jdbc.driver}" />
                <property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
                <property name="javax.persistence.jdbc.user" value="${jdbc.username}" />
                <property name="javax.persistence.jdbc.password" value="${jdbc.password}" />
            </properties>
        </persistence-unit>
    </persistence>

## Dissecting the pom.xml

Lets go through these one by one... So basically we will build in
development and in, say, production in this case. We want the build to
parse the persistence.xml file and replace the `${...}` strings with the
values specified in the profiles in pom.xml. Now our normal maven
commands is: `mvn package` and we simply use: `mvn -Pproduction package`
and it will run this for production. You can execute just `mvn package`
and it will take the values that are not in the profiles, but specified
just in the top level `<properties>` section, in my case these are my
development settings.

The next thing to be aware of is that we have turned on filtering for
the `src/main/resources` directory as specified in the `resources`
section. The `maven-resources-plugin` plugin will look for this and do
the actual filtering. Be aware, all `${..}` style strings will try to
get processed in all sub-folders of `src/main/resoruces`!

## Apply the filtering

Finally, you’ll want to merge the properties specifiec in the pom.xml
into the persistence.xml file. This is done with the command:

    mvn process-resources

If you want to do this for the `production` profile issue the command
with a `-P` flag like so:

    mvn -Pproduction process-resources

cat out the file to see your changes applied:

    cat target/classes/META-INF/persistence.xml 

# Junk to sort through

    <descriptorRef>jar-with-dependencies</descriptorRef>

    <plugin>
        <artifactId>maven-assembly-plugin</artifactId>
        <configuration>
            <descriptors>
                <descriptor>src/assemble/assembly.xml</descriptor>
            </descriptors>
            <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
            </descriptorRefs>
        </configuration>
    </plugin>


    <assembly
        xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
        <id>excludeJars</id>
        <dependencySets>
            <dependencySet>
                <includes>
                    <include></include>
                </includes>
                <excludes>
                    <exclude>log4j:log4j</exclude>
                    <exclude>mysql:mysql-connector-java</exclude>
                    <exclude>org.eclipse.persistence:eclipselink</exclude>
                </excludes>
            </dependencySet>
        </dependencySets>
    </assembly>


    <formats>
        <format>jar</format>
    </formats>

    <dependencySets>
        <dependencySet>
            <scope>runtime</scope>
        </dependencySet>
    </dependencySets>

    compile: packaged, default scope, available in all classpaths (compilation, testing, and during execution)
    runtime: packaged, required to run, but not compile
    test: not packaged, only during testing
    provided: not packaged, otherwise like compile

    runtime

    don't unpack included jars:

    <dependencySet>
      <unpack>false</unpack>
      <scope>runtime</scope>
    </dependencySet>


    <dependency>
        <groupId>javax.persistence</groupId>
        <artifactId>persistence-api</artifactId>
        <version>1.0b</version>
    </dependency>


    activate profiles in pom.xml

    mvn -Pproduction install

    pom.xml...
    <profile> 
      <id>production</id> 

    <?xml version="1.0" encoding="UTF-8"?>
    <persistence 
        xmlns="http://java.sun.com/xml/ns/persistence"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
        version="1.0">

        <persistence-unit name="serverAssistPersistUnit">
            <class>com.leveltree.stellent.serverassist.database.Revision</class>
            <class>com.leveltree.stellent.serverassist.database.DocMeta</class>

            <properties>
                <property name="javax.persistence.jdbc.driver" value="${jdbc.driver}" />
                <property name="javax.persistence.jdbc.url" value="${jdbc.url}" />
                <property name="javax.persistence.jdbc.user" value="${jdbc.username}" />
                <property name="javax.persistence.jdbc.password" value="${jdbc.password}" />
            </properties>
        </persistence-unit>
    </persistence>
    ------------------------------------------------------------------------
    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.leveltree</groupId>
        <artifactId>serverAssist</artifactId>
        <version>0.1</version>

        <dependencies>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring</artifactId>
                <version>2.5.5</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.9</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>net.sourceforge.jtds</groupId>
                <artifactId>jtds</artifactId>
                <version>1.2</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.1</version>
                <scope>test</scope>
            </dependency>
            <dependency>
                <groupId>org.eclipse.persistence</groupId>
                <artifactId>eclipselink</artifactId>
                <version>2.0.0</version>
                <scope>runtime</scope>
            </dependency>
            <dependency>
                <groupId>javax.persistence</groupId>
                <artifactId>persistence-api</artifactId>
                <version>1.0</version>
            </dependency>
            <dependency>
                <groupId>javax.transaction</groupId>
                <artifactId>jta</artifactId>
                <version>1.1</version>
            </dependency>
        </dependencies>
        <repositories>
            <repository>
                <id>spicevan</id>
                <url>http://files.spicevan.com/maven2/</url>
            </repository>
            <repository>
                <id>EclipseLink Repo</id>
                <url>http://www.eclipse.org/downloads/download.php?r=1&amp;nf=1&amp;file=/rt/eclipselink/maven.repo</url>
            </repository>
            <repository>
                <id>jboss</id>
                <url>http://repository.jboss.org/maven2</url>
            </repository>
        </repositories>
        <build>
            <finalName>server-assist</finalName>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>2.0.2</version>
                        <configuration>
                            <source>1.5</source>
                            <target>1.5</target>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <configuration>
                            <descriptors>
                                <descriptor>src/assemble/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>2.4.3</version>
                        <configuration>
                            <includes>
                                <include>**/*Test*.java</include>
                            </includes>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
            <resources>
                <resource>
                    <directory>src/main/resources</directory>
                    <includes>
                        <include>persistence.xml</include>
                    </includes>
                    <filtering>true</filtering>
                </resource>
            </resources>
            <filters>
                <filter>src/main/filters/default.properties</filter>
            </filters>
        </build>
        <profiles>
            <profile>
                <id>production</id>
                <properties>
                    <jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
                    <jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
                    <jdbc.username>ftravers</jdbc.username>
                    <jdbc.password>welcome1</jdbc.password>
                </properties>
            </profile>
            <profile>
                <id>test</id>
                <properties>
                    <jdbc.url>jdbc:jtds:sqlserver://picdev:1145/stellent10</jdbc.url>
                    <jdbc.driver>net.sourceforge.jtds.jdbc.Driver</jdbc.driver>
                    <jdbc.username>ftravers</jdbc.username>
                    <jdbc.password>welcome1</jdbc.password>
                </properties>
            </profile>
        </profiles>
    </project>

    ------------------------

    <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
        <modelVersion>4.0.0</modelVersion>
        <groupId>com.oracle.ngsp</groupId>
        <artifactId>crmod-ws-wrapper</artifactId>
        <version>0.0.1-SNAPSHOT</version>
        <dependencies>
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.8.1</version>
                <scope>compile</scope>
            </dependency>
            <dependency>
                <groupId>commons-httpclient</groupId>
                <artifactId>commons-httpclient</artifactId>
                <version>3.1</version>
            </dependency>
            <dependency>
                <groupId>log4j</groupId>
                <artifactId>log4j</artifactId>
                <version>1.2.12</version>
            </dependency>
        </dependencies>

        <distributionManagement>
            <downloadUrl>http://files.spicevan.com/maven2/</downloadUrl>
            <site>
                <name>CRMOD SSO Login</name>
                <id>spicevan</id>
                <url>scp://spicevan.com/home/spiceman/files.spicevan.com/crmod-java-wrapper/</url>
            </site>
            <repository>
                <id>spicevan</id>
                <name>spicevan</name>
                <url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
            </repository>
            <snapshotRepository>
                <id>spicevan</id>
                <name>spicevan</name>
                <url>scp://spicevan.com/home/spiceman/files.spicevan.com/maven2/</url>
            </snapshotRepository>
        </distributionManagement>
        <developers>
            <developer>
                <id>fenton</id>
                <name>Fenton Travers</name>
                <email>fenton.travers@gmail.com</email>
                <roles>
                    <role>Architect</role>
                </roles>
                <organization>ngsp.git.oracle.com</organization>
                <timezone>+8</timezone>
            </developer>
        </developers>
        <reporting>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>2.7</version>
                    <configuration>
                    </configuration>
                </plugin>
            </plugins>
        </reporting>
        <repositories>
            <repository>
                <id>spicevan</id>
                <url>http://files.spicevan.com/maven2/</url>
            </repository>
        </repositories>

        <properties>
            <crmod.ssoPassword>password</crmod.ssoPassword>
            <crmod.ssoUsername>fenton.travers@oracle.com</crmod.ssoUsername>
            <crmod.companyId>ONGS</crmod.companyId>
            <crmod.serverName>https://secure-ausomxfca.crmondemand.com/</crmod.serverName>
        </properties>
        <profiles>
            <profile>
                <id>prod</id>
                <properties>
                    <crmod.serverName>https://secure-ausomxfba.crmondemand.com/</crmod.serverName>
                </properties>
            </profile>
        </profiles>
        <build>
            <finalName>crmod-ws-wrapper</finalName>
            <pluginManagement>
                <plugins>
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <version>2.3</version>
                        <configuration>
                            <encoding>UTF-8</encoding>
                        </configuration>
                    </plugin>
                    <plugin>
                        <artifactId>maven-assembly-plugin</artifactId>
                        <version>2.2-beta-5</version>
                        <configuration>
                            <descriptorRefs>
                                <descriptorRef>jar-with-dependencies</descriptorRef>
                            </descriptorRefs>
                            <archive>
                                <manifest>
                                    <mainClass>com.oracle.ngsp.controller.Controller</mainClass>
                                </manifest>
                            </archive>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-source-plugin</artifactId>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>jar</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-javadoc-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>attach-javadocs</id>
                                <!-- Restrict execution of source compilation to install -->
                                <phase>install</phase>
                                <goals>
                                    <goal>javadoc</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>2.0.2</version>
                        <configuration>
                            <source>1.5</source>
                            <target>1.5</target>
                        </configuration>
                    </plugin>
                </plugins>
            </pluginManagement>
            <resources>
                <resource>
                    <directory>src/main/resources</directory>
                    <filtering>true</filtering>
                </resource>
            </resources>
        </build>
    </project>
