[home](../../index.html) \> [training](../index.html) \> [Java EE6](index.html) \> Spring

# Spring Dependency Injection – Overview

We are trying to create a scenario where we can write code that does
depend on outside services, but that we can test without having to
have those outside services available.

## Maven Dependencies

	<properties>
		<org.springframework.version>3.0.5.RELEASE</org.springframework.version>
    </properties>
    <dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
	        <version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${org.springframework.version}</version>
			<scope>test</scope>
		</dependency>

## File and Folder Structure

Lets pretend our package structure looks like: `com.acme.project`

     src/main/java/com/acme/project/hasDep
     src/main/java/com/acme/project/isRealDep
     src/test/java/com/acme/project/isFakeDep

Classes that have dependencies, such as database, webservices, etc...,
will go in `isRealDep`.  Classes that have those classes, will go in
`hasDep` package.  Finally, the stubs will go in `isFakeDep`.
Additionally, we'll define an interface that both the `isFakeDep` and
`isRealDep` implement.

In this example we have an external Human Resources Management System
database that we'll be interacting with.  So we'll call the interface:

     src/main/java/com/acme/project/IHrmsDao.java

And we'll have two implementations, the real one and the stub, that
implement the interface. 

    src/main/java/com/acme/project/isReadDep/HrmsDao.java
    src/test/java/com/acme/project/isFakeDep/FakeHrmsDao.java

Finally, we'll have a class that refers to the HrmsDao:

    src/main/java/com/acme/project/hasDep/HrmsController.java

## File Contents

In your classes that have a reference to classes that are going to get
stubbed out, include the following:
    
    @Component
    public class HrmsController {
        @Autowired
	    IHrmsDao hrmsDao;

The type should be the interface you defined, as sometimes this object
will be the real HrmsDao (in Production) and sometimes the HrmsDaoStub
(unit testing).



Create the following files:

![image](spring_di_folder_layout.png)

## The Production Code

src/main/java/main/Main.java

    package main;
    import org.springframework.beans.factory.BeanFactory;
    import org.springframework.context.ApplicationContext;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    import user.ClassWithExternalDependency;
    public class Main {
        public static void main(String[] args) {
            ApplicationContext context = new ClassPathXmlApplicationContext(
                    "main/application-context.xml");
            BeanFactory factory = context;
            ClassWithExternalDependency cwed = (ClassWithExternalDependency) factory
                    .getBean("classWithExternalDependency");
            cwed.run();
        }
    }

src/main/java/main/application-context.xml

     <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-2.5.xsd">
       <context:component-scan base-package="user" />
       <context:component-scan base-package="services" />
     </beans>

src/main/java/services/IService.java

    package services;
    public interface IService {
        public String service1(String filename);
    }

src/main/java/services/ProductionService.java

    package services;
    import org.springframework.stereotype.Service;
    @Service
    public class ProductionService implements IService {
        public String service1(String filename) {
            return "Real Service";
        }
    }

src/main/java/user/ClassWithExternalDependency.java

    package user;
    import org.springframework.beans.factory.annotation.Autowired;
    import org.springframework.stereotype.Service;
    import services.IService;
    @Service
    public class ClassWithExternalDependency {
        @Autowired
        private IService service;
        public void run() {
            System.out.println(service.service1("inputArgs"));      
        }
    }

## The Tests

src/test/java/testServices

    package testServices;
    import org.springframework.stereotype.Service;
    import services.IService;
    @Service
    public class UnitTestService implements IService {
        public String service1(String filename) {
            return "Fake Service.";
        }
    }

src/test/java/user/ClassWithExternalDependencyTest.java

    package user;
    import org.junit.Before;
    import org.junit.Test;
    import org.springframework.beans.factory.BeanFactory;
    import org.springframework.context.ApplicationContext;
    import org.springframework.context.support.ClassPathXmlApplicationContext;
    public class ClassWithExternalDependencyTest {
        private ClassWithExternalDependency cwed;
        @Before
        public void setup() {
            ApplicationContext context = new ClassPathXmlApplicationContext(
                    "user/test-application-context.xml");
            BeanFactory factory = context;
            cwed = (ClassWithExternalDependency) factory.getBean("classWithExternalDependency");
        }
        @Test
        public void testRun() {
            cwed.run();
        }
    }

src/test/java/user/test-application-context.xml

     <beans xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:context="http://www.springframework.org/schema/context"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
               http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
               http://www.springframework.org/schema/aop
               http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
               http://www.springframework.org/schema/context
               http://www.springframework.org/schema/context/spring-context-2.5.xsd">
       <context:component-scan base-package="user" />
       <context:component-scan base-package="testServices" />
     </beans>

That should do it

# Spring Web App

You’ll need to configure your web.xml to pickup your\
applicationContext.xml file

## Extra Notes

tips on loading the applicationContext.xml file from web.xml

http://www.gridshore.nl/2008/05/13/spring-application-context-loading-tricks/
