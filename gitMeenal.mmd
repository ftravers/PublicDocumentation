# DVCS

Distributed version control system takes a decentralized approach
towards version controlling. Here, rather than having a single
centralized repository where clients/users would check-in their code,
each user would have his local repository that can be shared/merged
with peers.

It has its advantages in allowing users to work productively when not
connected to network and since network is not involved, most
operations are faster. However, in DVCS, initial cloning of a
repository is slower compared to centralized checkout because all
branches and revision history are copied. This could be even more
painful if the network speed is low or if a huge project is to be
cloned.  GIT is one such distributed version control systems.


## Branches and merging in GIT

Branches in GIT refer to contexts. I can create many
branches/contexts. The default context created it is `master`. An
example scenario: I would like to have master as my stable branch. I
create a new branch, `trial` (for the changes that I want to do which
I am not sure would be stable.) using the following command:

    git branch trial
    git checkout trial

or

    git checkout -b trial

checkout will actually switch my context to `trial` from `master`. So,
in trial if I add a couple of files and track them using add command,
the two files will only be seen in `trial` branch. If I switch over to
`master` and list the available files using the `ls` command, I wont
see the 2 files. When I am pretty sure the 2 files I created in
`trial` context are stable enough and want them to be merged with
`master` , I would run the following command from `master` context:

    git merge trial

So, I can have many branches like `trial` and work on different codes
and then finally merge them.

Patch file:

Patch files are those that shows differences between my working copy
and the base revision.  Let me try creating a patch file here.  First
I am cloning/importing from Fentons`s repository:

    git clone git@linux1.hk.oracle.com:work-doco.git

Then I create a new branch, `test-patch`:

    cd work-doco
    git checkout -b test-patch

Then, I make changes to one of the files, ngspInfo.mmd and commit it.

Now, to create a patch file that will show the differences between my
changes to the originally cloned/imported files, I use the following
command:

    git format-patch master --stdout > showPatch.patch

Now, I can view what changes are in the patch with the following
command:

    mmurugap@mmurugap-lap ~/project/work-doco (test-patch|AM)
    $ git apply --stat showPatch.patch
     ngspInfo.mmd |    2 +-
     ngspInfo.mmd |    2 +-
     2 files changed, 2 insertions(+), 2 deletions(-)

## Fetch, pull, push

Git fetch downloads new branches and data from remote repositories. It
pulls data that I do not have locally. Difference between fetch and
pull is that with fetch, merging with local repository needs to
be done separately whereas pull fetches data and also merges it with
local repository.

    Git fetch <remote repository alias name>

Push helps in sharing my changes or commits with other users.
 
    Git push <remote repository alias name> <branch name>





 

