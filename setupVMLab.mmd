CSS: style.css

# Overview

This document will describe in broad strokes the steps you need to
go through to establish an Oracle Virtual Machine Lab. It assumes
that you have 1 dedicated ‘server’. This should be any old desktop
with as much RAM as possible, 4GB is considered a minimum.

## Install OVMS

OVMS. You can download the iso from
[eDelivery](http://edelivery.oracle.com/linux)

    Select a Product Pack: Oracle VM
    Platform: x86 32 bit
    Oracle VM 2.2.1 Media Pack  2.2.1.0.0   B58990-04   OCT-22-2010     

This is your base system now. Hopefully you setup a static IP
address. Lets just say it is: `192.168.8.2`. Lets call the machine
`vmsrv.mydomain.com`.

Once you have OVMS laid down. You need to download the OVMTB. This
is also located on [eDelivery](http://edelivery.oracle.com/linux).

    Select a Product Pack: Oracle VM
    Platform: x86 32 bit
    Oracle VM Templates for Oracle VM Manager 2.1.5 Media Pack for x86 (32 bit)

## Template Builder Template

In the previous step you downloaded the TBT.   
This is a virtual machine that you will untar on your OVMS.   
Then you will launch it. Steps:

-   Untar to folder:
    `/OVS/running_pool/OVM_EL5U2_X86_64_TMPLBUILDER_PVM/`

    [root@vmsrv OVM_EL5U2_X86_64_TMPLBUILDER_PVM]# ls
    data.img  README  System.img  vm.cfg
    [root@vmsrv OVM_EL5U2_X86_64_TMPLBUILDER_PVM]# cat vm.cfg
    bootloader = '/usr/bin/pygrub'
    disk = ['file:/OVS/running_pool/OVM_EL5U2_X86_64_TMPLBUILDER_PVM/System.img,xvda,w',
            'file:/OVS/running_pool/OVM_EL5U2_X86_64_TMPLBUILDER_PVM/data.img,xvdb,w']
    memory = '1024'
    name = 'OVM_EL5U2_X86_64_TMPLBUILDER_PVM'
    vcpus = 1
    on_crash = 'restart'
    on_reboot = 'restart'
    vfb = ['type=vnc,vncunused=1,vnclisten=0.0.0.0']
    vif = ['type=netfront']
    [root@vmsrv OVM_EL5U2_X86_64_TMPLBUILDER_PVM]#

Notice the changes I’ve made from the default vm.cfg. The location
of the file images (System.img & data.img) will need updating.
Launch the vm with:

    [root@vmsrv OVM_EL5U2_X86_64_TMPLBUILDER_PVM]# xm create vm.cfg

### Configure Template Builder Template

Follow all the steps in the following documentation section to
setup a static ip and hostname for the TBT.

-   [Setup a static IP and ...](/jeos/oel_detail_setup.html#staticIp)

### TB Web Interface

Now that the network is properly setup, we can SSH into the machine
and   
abandon our VNC client from now on in. Lets assume that the machine
name   
is: `tb` and that it’s IP Address is: `192.168.8.3`.

Rebooting this machine we can then open a browser on your laptop
and put the following URL in:

    http://tb/ovmtb

Select the `register` link, choosing `oracle` to be the username
and `welcome1` to   
be the password.

### Getting the JeOS Template

Again from: [eDelivery](http://edelivery.oracle.com/linux) we can
grab the JeOS(Just enough Operating System) templates we want.

    Select a Product Pack: Oracle Linux
    Platform: x86 32 bit
    JeOS Oracle Linux 5 Update 5 base image x86 (32 Bit)    V21114-01   135M

and

    Select a Product Pack: Oracle Linux
    Platform: x86 32 bit
    JeOS Base x86 and x86_64

You’ll eventually end up with the following files after you’ve
downloaded the above and unzipped them:

    [root@vl-vmsrv2 jeos]# ls
    ovm-el5u5-xvm-jeos-1.1.0-1.el5.i386.rpm  ovm-template-config-1.1.0-1.el5.noarch.rpm
    ovm-modify-jeos-1.1.0-2.el5.noarch.rpm

### Install JeOS Images

    [root@linux1 jeos]# rpm -ivh ovm-modify-jeos-1.1.0-2.el5.noarch.rpm 
    Preparing...                ########################################### [100%]
        file /usr/bin/modifyjeos from install of ovm-modify-jeos-1.1.0-2.el5 conflicts with file from package ovm-modify-jeos-1.1.0-1.el5
    [root@linux1 jeos]# rpm -ivh ovm-el5u5-xvm-jeos-1.1.0-1.el5.i386.rpm
    Preparing...                ########################################### [100%]
       1:ovm-el5u5-xvm-jeos     ########################################### [100%]
    [root@linux1 jeos]# 

### Build first template

Now we can build our first template. The first template we’ll build
is one that will contain several useful functions. We’ll put our
own Template Builder on it...this way we can throw away the one we
downloaded. Lets get started with that, and we can add more
software onto the image later.

#### Setup New Template

-   In the web ui `http://tb/ovmtb` you can select the '‘New
    Template Project’' button on the top right.

-   We can name this template after the size of the system disk we
    will allocate to it and the OS it will be running. Lets choose:
    `sys6gb_swp1gb_oel5u5`, meaning we’ll assign a 6144MB system disk
    and install OEL 5 update 5 into it.

-   Choose `EL55_i386_PVM_jeos`, as the JeOS Image, and hit next.
    PVM is *WAY* faster than a HVM. This is fine for OEL, but if we
    want a Windows VM, we are stuck using HVM. (Note: there are PVM
    drivers for windows which we can install to minimize the slowness
    of HVM)

-   We simply don’t care about VCPUs and Memory as these are
    trivial to change after the fact. System disk size and Swap space,
    however are harder to change. The general rule of thumb for swap
    space is that it should be twice the RAM. For our purposes, I want
    this template to have a SLIM memory footprint, so 512 RAM should be
    okay, and we’ll set the swap to be 1024. We can set the System disk
    size to be 6GB, which is: 6144MB. Hit next.

-   Use the OEL 5U3 repo. Next. Add the `wget` package. Next. Skip
    Additional Packages. Next. Click `Save and Build`. It will take
    some time (maybe \~5-10 minutes) so relax and have a beer! :)

## Using the new template

The new template will be saved to:

    /opt/ovmtb/tarballs

as it reports in the status window. Lets copy that to our VM
server, which is easy because of the NFS mount we’ll create next:

### Easy Disk Access

Export /OVS/downloads on server, import it to /mnt/vmsrv on client.
Please follow: [these instructions](applications.html#nfs) to get
it setup.

### copy, extract, launch

    # cp project_3.tgz /mnt/vmsrv/

Login to the VM server and extract it.

    # mv  /OVS/downloads/project_3.tgz /OVS/running_pool/
    # tar xvfz /OVS/running_pool/project_3.tgz

Cleanup the vm.cfg file, in a
[similar way to the TBT above](#tbt).

I’m gonna use this template for Oracle Virtual Machine Manager, and
Oracle Virtual Machine Template Builder...so I rename the folder to
reflect that.

    mv sys6gb_swp1gb_oel5u5/ ovmm_ovmtb/

Here is a look at my new vm.cfg file:

    # cat vm.cfg
    bootloader = '/usr/bin/pygrub'
    disk = ['file:/OVS/running_pool/ovmm_ovmtb/System.img,xvda,w']
    memory = '512'
    name = 'ovmm_ovmtb'
    vcpus = 1
    on_crash = 'restart'
    on_reboot = 'restart'
    vfb = ['type=vnc,vncunused=1,vnclisten=0.0.0.0']
    vif = ['bridge=xenbr0,mac=00:16:3e:00:00:01']

make sure the vif has a mac address set.

Lets fire it up...

    # xm create vm.cfg

## configure VNC

It’s handy to understand the line:
`vfb = ['type=vnc,vncunused=1,vnclisten=0.0.0.0']`

Actually, vncunused=1 says use the first unused vnc port.
vncunused=0 shuts   
off that behavior.

    # The backend listens on 127.0.0.1 port 5900+N by default, where N is 
    # the domain ID.  You can override both address and N: 
    # 
    # vfb = [ 'type=vnc,vnclisten=127.0.0.1,vncdisplay=1' ] 
    # 
    # Or you can bind the first unused port above 5900: 
    # 
    # vfb = [ 'type=vnc,vnclisten=0.0.0.0,vnunused=1' ] 

So we don’t need to use trial and error to find the right port,
lets hard set the port to be: `vncdisplay=10`, lets modify the
vm.cfg to reflect this and restart it. The line now looks like:
`vfb = ['type=vnc,vncdisplay=10,vnclisten=0.0.0.0']`. We can reboot
with:

    # xm reboot ovmm_ovmtb

## VNC in

Once it is running you’ll need to `VNC` into machine to update it’s
IP address,  
hostname, etc...

-   Ubuntu: Out of the box: Applications \> Internet \> Remote
    Desktop Viewer
-   Mac: Chicken of the VNC
-   Windows: Tight VNC

You set the IP address of the VNC Server to be the IP Address of
your OVMS. The port you use depends on the number of VM’s you have
running. Start at port 0 (aka 5900) and work your way up until you
find the VM you are interested in. Or if you have set a static
port, VNC into that.

## Configure VM

Now that you are VNC’d into the VM.

-   Login with `root/ovsroot`.
-   Determine the IP address with: `ifconfig -a` you are looking
    for the entry next to `eth0` that says `inet addr`.
-   Open port SSH and Web ports:

    system-config-securitylevel-tui --quiet --port=http --port=ssh --port=https

-   Setup an [SSH trust](/secure.html#sshAutoLogin)

-   Static IP: To convert a dhcp OEL to Static IP address edit
    file:

    [root@localhost network-scripts]# vi /etc/sysconfig/network-scripts/ifcfg-eth0
    DEVICE=eth0
    ONBOOT=yes
    BOOTPROTO=static
    IPADDR=192.168.8.118
    NETMASK=255.255.255.0
    GATEWAY=192.168.8.1
    TYPE=Ethernet

Make sure there is NO HWADDR setting in here.

-   Hostname: Change the hostname here:

    [root@localhost network-scripts]# vi /etc/sysconfig/network

-   Hostname: set for this session with:

    [root@localhost ~]# hostname ucm

-   Now you can restart your network services with the following
    command:

    [root@localhost ~]# service network restart

Your terminal session should die here and you can now setup a new
[SSH trust](/secure.html#sshAutoLogin), as trusts are based on IP
addresses and you’ve changed IP Address.

Finally update your name servers, and root passwords

    [root@db11g ~]# cat > /etc/resolv.conf
    search hk.oracle.com
    nameserver 10.179.253.14
    nameserver 146.56.237.50
    nameserver 140.83.70.155

    [root@db11g ~]# passwd

## Install Software

Most software install will be done via YUM, which is the default
for Redhat based systems. First thing we need to do is get a decent
yum repo file going. So lets download a latest version. You might
need to set your web proxy, so that step is listed first.

Put the export http\_proxy line at the bottom of `/etc/profile` so
all users get this environment variable set.

    # cat >> /etc/profile
    export http_proxy=http://www-proxy.sg.oracle.com

Download the repo file:

    # cd /etc/yum.repos.d/
    # wget http://public-yum.oracle.com/public-yum-el5.repo

If you dont have wget installed:  
In a browser on your local laptop navigate to:
[http://public-yum.oracle.com/public-yum-el5.repo](http://public-yum.oracle.com/public-yum-el5.repo).
Save the file as: `public-yum-el5.repo` to your desktop, and
transfer it to the VM you are setting up into the folder:
`/etc/yum.repos.d/`. A command like the following should do the
trick:

    ~/Desktop$ scp public-yum-el5.repo root@alm.hk.oracle.com:/etc/yum.repos.d/

Change all the enabled=0 to enabled=1, for: [el5\_ga\_base],
[el5\_u5\_base], [ol5\_u5\_base], [el5\_addons], and
[el5\_oracle\_addons]

Test it out:

    yum install wget

[Add rpmforge repo too.](setupVMLab.html#setuprpmforge)

## Backup

Since we’ve put quite a bit of work into this image already and
don’t want to repeat ourselves, lets take a backup of it. From the
VM server, shutdown the VM.

    xm shutdown ovmm_ovmtb

Ensure that the vm is not longer listed with the following command,
you may need to wait a few seconds for the VM to shutdown.

    xm list

Now just tar and zip it up with:

    cd /OVS/running_pool
    tar cvfz ovmm_ovmtb.tgz ovmm_ovmtb

The result was a 183MB file...quite small and shareable! Cool!
Thats  
an entire, modern OS in 183MB! Fire the image back up, give it a  
minute to startup and ssh back into it.

## Install Template Builder

Download the JeOS RPM files from eDelivery.oracle.com/linux:

-   Product Pack: Oracle Linux
-   Platform: x86 32 bit
-   Description: Oracle Linux JeOS for Building Oracle VM templates
    for x86 (32 bit)

Download:

-   Name: JeOS Base x86 and x86\_64 V17420-01
-   Name: JeOS Oracle Linux 5 Update 5 base image x86 (32 Bit)
    V21114-01

The first one has an RPM we need next, and the second one has the
OEL5U5 images we’ll be using to stamp out new OEL5U5 images.

untar/unzip, then copy to the VM

    scp ovm-modify-jeos-1.1.0-2.el5.noarch.rpm root@alm.hk.oracle.com:/tmp

Go back onto the server and install the RPM. But first we need to
install some pre-requisits, then we can install ovmtb

    yum install -y bzip2 createrepo parted perl
    rpm -ivh ovm-modify-jeos-1.1.0-2.el5.noarch.rpm
    yum install -y ovmtb ovmtb-images

Lets unzip the second download, and send it over to the VM:

    unzip V21114-01.zip
    scp ovm-el5u5-xvm-jeos-1.1.0-1.el5.i386.rpm root@alm.hk.oracle.com:/tmp

We can now go install these as well:

    rpm -ivh ovm-el5u5-xvm-jeos-1.1.0-1.el5.i386.rpm

That should do the trick. Lets restart a couple of services for
good measure and see if our web UI for TB is ready for us.

    service httpd restart; service ovmtb restart

Navigate to:
[http://alm.hk.oracle.com/ovmtb](http://alm.hk.oracle.com/ovmtb)

Choose register, put in a `username/password` combo such as
`oracle/welcome1`.

### folder linking

There are two folders that use a lot of space:

-   `/opt/ovmtb/builds/`
-   `/opt/ovmtb/tarballs/`

Recommend repointing these to the NFS drive so we can keep the
OVMTB  
disk as small as possible. (2GB seems about the limit of small).
This  
makes backing up much quicker.

Since we don’t have a lot of extra disk space to store the
templates  
we’ll create on this image, soft link the `/opt/ovmtb/tarballs`
folder  
directly to the NFS mount. That way the templates will be written
to  
the large NFS mount and we don’t have to create a large VM just to
run  
template builder. Large VM’s are a pain to back up and ship
around.

    [root@alm ovmtb]# mv tarballs/ /mnt/vmsrv/
    [root@alm ovmtb]# mv builds/ /mnt/vmsrv/

NOTE: the above command will throw some permission errors...they
can  
be safely ignored.

[root@alm ovmtb]\# ln -s /mnt/vmsrv/tarballs tarballs  
[root@alm ovmtb]\# ln -s /mnt/vmsrv/builds builds

## OVM Manager

-   Go to: [edelivery.oracle.com/linux](edelivery.oracle.com/linux)
-   Select a product pack: Oracle VM
-   Platform: x86 32 bit. Click Go
-   Click on link: Description/Release/Part Number: Oracle VM 2.2.1
    Media Pack / 2.2.1.0.0 / B58990-04
-   Download: Name: Oracle VM Manager 2.2.0

Now it can be a pain to download once to your desktop and then up
to your server. You can download directly from edelivery to your
server with a cute little trick. You can’t just use `wget <url>`
because we need to login to edelivery and it gives our browser a
cookie. So do the following:

-   Use firefox.
-   Install the Export Cookies plugin:
    https://addons.mozilla.org/en-US/firefox/addon/8154/
-   Log into edelivery going right up to the place where you
    normally download from.
-   In Firefox \> Tools \> Export Cookies... export the cookie file
    to (say) your desktop.
-   scp this up to the machine where you want to download from
-   run wget as follows:

    wget --load-cookies=cookies.txt "http://edelivery.oracle.com/EPD/Download/process_download/V18419-01.zip?file_id=28676878&aru=11865636&userid=890087&egroup_aru_number=12550529&email=fenton.travers@oracle.com&country_id=344&patch_file=V18419-01.zip"

Note I have the URL in quotes so the `&` don’t screw things up.
Also this is just a sample url.

hostname should be resolved in file “/etc/hosts” please check the  
result of the command ‘hostname’ returned and make sure it is the
same  
as the hostname in "/etc/hosts"

    cat /etc/hosts
    127.0.0.1       localhost alm.hk.oracle.com alm

    yum install -y libaio bc 
    mkdir /mnt/disk
    mount -o loop OracleVM-Manager-2.2.0.iso /mnt/disk
    cd /mnt/disk; sh runInstaller.sh

NOTE: make sure to answer the following question with 'n'

    Do you want to use HTTPS access for Oracle VM Manager (Y|n)?n

note: It can take a bit...so be patient.

-   restart

-   test with URL:

    http://alm.hk.oracle.com:8888/OVS/

login: `(admin/password)`

# Other

if you want to make a VM based on an ISO file such as windows xp
or  
ubuntu,

-   make a directory under /OVS/iso\_pool/, say ‘ubuntu’ and drop

your \*.iso file in it.

-   might need to restart the server

-   resources \> import \> Select from Server Pool (Discover and
    register) \>

-   expand search, set iso-label = %, set server pool to your pool
    name, then approve the iso in there.

