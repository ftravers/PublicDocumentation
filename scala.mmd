# Start a project

## Launch xsbt

Create a blank folder, create project folders, cd into it and start `xsbt`.  Example:

    cd ..;rm -rf scalaProj1/; mkdir -p scalaProj1; cd scalaProj1/; mkdir -p src/{main,test}/{scala,java,resources} project/build; xsbt

## Project File

At `project/Build.scala` put:

```scala
import sbt._
object MyBuild extends Build {
  lazy val root = Project("MyProject", file("."))
}
```

## Start Coding

Turn on *Triggered Execution* for the `compile` command, so updated
source files will be automatically compiled.

    > ~ compile

## Create new scala object 

Create new scala object `HelloWorld` in
`PROJECT_ROOT/src/main/scala/HelloWorld.scala`

```scala
object HelloWorld {
  def main(args: Array[String]){
    println(hello)
  } 
  def hello:String = {
    return "Hello World!";
  }
}  
```

The argument of the scala command has to be a top-level object. If
that object is followed by the clause extends Application, then all
statements contained in that object will be executed; otherwise you
have to add a method main which will act as the entry point of your
program.  Here is how an object that extends Application looks like
(note this is just an FYI don't put it in your scala file yet):

```scala
object HelloWorld2 extends Application {
  println("Hello, world!")
}
```

## Run it

As you saved the above file you should have seen it get compiled.
Lets run it, open a terminal and go to your project directory and
type:

```bash
$ scala -cp target/scala-2.8.1.final/classes HelloWorld
Hello World!
```

As an alternative, open a second terminal window and launch `xsbt`
there.  Then run your program from there by typing:

    > run

## Package

Make a jar out of your work

    > package

```bash
$ find target -name "*.jar"
target/scala-2.8.1.final/myproject_2.8.1-0.1.jar
```

## Deploy

### Local Ivy

First lets deploy to our local ivy repository, so other projects
locally can use this jar.

    > publish-local

### Maven Repository

Lets setup publishing to a maven repository.


    ******** TO BE FIGURED OUT ************





## Setup Maven Repository

I currently have a corporate Maven repo I publish to, and I'd like to
continue with that so here is how to setup that in SBT/Scala.  In your
`project/build/Project.scala`

## Add a class and use it

Create new scala class `Second` in
`Tutorial1/src/main/scala/Second.scala`

    class Second {
      def func1 = {
        return "Hello World!";
      }
    }  

Update your HelloWorld.scala file to be:

    object HelloWorld {
      def main(args: Array[String]){
        println(hello)
      }
      def hello:String = {
        val s = new Second
        return s.func1;
      }
    }







## Scala Repl

To drop into a scala shell do:

    > console-project


## Log Levels

Temporarily change the logging level and configure how stack traces
are displayed by modifying the log-level or trace-level settings:

    > set logLevel := Level.Warn

Valid Level values are Debug, Info, Warn, Error.


# COOKBOOK & Tutorial

## Play with lists and functions

Start the scala REPL and cut and paste these into it

    val fname = "Fenton"
    val lname = "Travers"
    val fullName = fname + " " + lname
    def fun1( arg1 : String, arg2 :String) : String = arg1 + ":" + arg2
    fun1(fname, lname)
    val alphaList = List("a", "b")
    val numList = List("1", "2")
    val zipList = alphaList zip numList
    def fun2( pair : List[(java.lang.String, java.lang.String)] ) : String = pair(0) + ":" + pair(1)

## Create XML

This project will create a SOAP message to query Service Requests from
CRMOD.  There is a current Java implementation, that I'd like to
rewrite in Scala.  Currently the Java method signature looks like:

    String getSoapQueryBody(
      String template, 
      String requestType, 
      int startRow, 
      int pageSize,
      List<Field> fields, 
      List<String> sortFields, 
      List<String> sortOrders, 
      String soapVersion) {
        String sortClauseV2 = getSortClauseV2(sortFields, sortOrders);
		String fieldsSoap = getQueryBody(requestType, fields, soapVersion, sortClauseV2);
		Map<String, String> parameters = new HashMap<String, String>();
		parameters.put("requestTypeLowerCase", requestType.toLowerCase());
		parameters.put("requestType", requestType);
		parameters.put("fields", fieldsSoap);
		parameters.put("pageSize", Integer.toString(pageSize));
		parameters.put("startRow", Integer.toString(startRow));
		String soapQueryBodyV2 = TemplateParser.populateTemplate(templates, template, parameters, TemplateParser.ALL);
		return soapQueryBodyV2;
	  }

Here is the first method inside the above method:

    String getSortClauseV2(List<String> sortFields, List<String> sortOrders) throws ServiceException {
        	Map<String, String> parameters = new HashMap<String, String>();
        	StringBuffer sortClauses = new StringBuffer();
        	if (sortOrders.size() != sortFields.size())
        		throw new ServiceException("Sort Fields and Sort Orders are different sizes");
        	if (sortFields != null && sortOrders != null) {
        		for (int ii = 0; ii < sortFields.size(); ii++) {
        			parameters.put("fieldName", sortFields.get(ii));
        			parameters.put("sortOrder", sortOrders.get(ii));
        			parameters.put("sortSequence", Integer.toString(ii + 1));
        			String fieldEntry = TemplateParser.populateTemplate(templates, "soapV2SortClause", parameters,
        					TemplateParser.ALL);
        			sortClauses.append(fieldEntry);
        		}
        	}
        	return sortClauses.toString();
        }

Basically this method is expecting two lists: sortFields, and
sortOrders.  So valid data might look like (in pseudo code):

    sortFields = { 'firstname', 'lastname' }
    sortOrders = { 'asc', 'desc' }

So this means sort first on `firstname` in an ascending (`asc`)
manner, then on `lastname` in a descending (`desc`) manner.

This data then gets converted into an XML fragment of the form:

    soapV2SortClause=<ns1:$fieldName$ sortorder="$sortOrder$" sortsequence="$sortSequence$"></ns1:$fieldName$>

So an output XML given the data specified above might look like:

    <ns1:firstname sortorder="asc" sortsequence="1"></ns1:firstname>

So this could be viewed as our first function.  Input: 

* a field name,
* sort order {'asc','desc'}, and 
* a sort sequence {int}, 
* return some XML that looks like the fragment above.  

So lets get started with the Scala.

    class SrQuerySoap {
      def singleSortClause( fieldName : String, sortOrder : String, sortSequence : String )
        = <ns1:{fieldName} sortorder="{sortOrder}" sortsequence="{sortSequence}"></ns1:{fieldName}>
    }

Now in Java we'd want to iterate over a list of field names and sort
orders, so lets see what that Scala might look like:

      def entireSortClause( sortFields : List[String], sortOrders : List[String] ) : String = {
        
      }


This might produce XML like the following:

    <?xml version="1.0" encoding="UTF-8"?>
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
      <soapenv:Body>
        <ServiceRequestQueryPage_Input xmlns="urn:crmondemand/ws/ecbs/servicerequest/10/2004">
          <ns1:ListOfServiceRequest xmlns:ns1="urn:/crmondemand/xml/ServiceRequest/Query" pagesize="10" recordcountneeded="true" startrownum="0">
            <ns1:ServiceRequest>
              <ns1:SRNumber/>
              <ns1:AccountName sortorder="ASC" sortsequence="1"/>
            </ns1:ServiceRequest>
          </ns1:ListOfServiceRequest>
        </ServiceRequestQueryPage_Input>
      </soapenv:Body>
    </soapenv:Envelope>

Basically, we'd like to pass in the following parameters:




Create the follow file: `src/main/scala/SrQuerySoap.scala`

    class SrQuerySoap {

    /*

    soapQueryV10=<?xml version="1.0"?><SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:SOAPSDK1="urn:crmondemand/ws/$requestTypeLowerCase$/10/2004" xmlns:SOAPSDK2="urn:/crmondemand/xml/$requestTypeLowerCase$"><SOAP-ENV:Body><SOAPSDK1:$requestType$WS_$requestType$QueryPage_Input><UseChildAnd>false</UseChildAnd><PageSize>$pageSize$</PageSize><SOAPSDK2:ListOf$requestType$>$fields$</SOAPSDK2:ListOf$requestType$><StartRowNum>$startRow$</StartRowNum></SOAPSDK1:$requestType$WS_$requestType$QueryPage_Input></SOAP-ENV:Body></SOAP-ENV:Envelope>
    
    body=<$object$>$fields$$sortClause$</$object$>
    
    fieldEntry=<$fieldName$>$fieldValue$</$fieldName$>
    
    soapQueryV2=<?xml version="1.0" encoding="UTF-8"?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><soapenv:Body><$requestType$QueryPage_Input xmlns="urn:crmondemand/ws/ecbs/$requestTypeLowerCase$/10/2004"><ns1:ListOfServiceRequest pagesize="$pageSize$" recordcountneeded="true" startrownum="$startRow$" xmlns:ns1="urn:/crmondemand/xml/$requestType$/Query">$fields$</ns1:ListOf$requestType$></$requestType$QueryPage_Input></soapenv:Body></soapenv:Envelope>
    
    soapV2FieldEntry=<ns1:$fieldName$>$fieldValue$</ns1:$fieldName$>
    
    soapV2SortClause=<ns1:$fieldName$ sortorder="$sortOrder$" sortsequence="$sortSequence$"></ns1:$fieldName$>
    
    soapV2Action="document/urn:crmondemand/ws/ecbs/$objectNameLowerCase$/10/2004:$objectName$$method$"


    String soapBody = soapIoHelper.getSoapQueryBody3(SoapIoHelper.SOAP_QUERY_V2, requestType, startRow, pageSize, fields, sortFields, sortOrders, SoapIoHelper.V2);

    */
			throws ServiceException 

      def func1 = {
        return "Hello World!";
      }
    }  


# Emacs and Scala

[ref](http://thegreylensmansview.blogspot.com/2009/02/stone-tools-and-scala-development-part.html)

# Reference:

* [First Steps](http://www.artima.com/pins1ed/first-steps-in-scala.html)
* [First Steps](http://www.artima.com/scalazine/articles/steps.html)
* [Eclipse and Scala](http://www.vogella.de/articles/Scala/article.HTML)

Here are some *Learning Scala* references:

* [O'Reilley Book: Programming Scala](http://ofps.oreilly.com/titles/9780596155957/IntroducingScala.html)
* [List of Scala resources](http://www.scala-lang.org/node/1305)
* [Another good ONLINE scala reference by Martin Odersky](http://www.artima.com/pins1ed/)

# Installation

Simply untar and add [scala-home]/bin to your path.

## Running Scala

Create a class that looks like the following:

    package secondScala;
     
    object App extends Application {
      override def main(args : Array[String]) { println( "Hello World!" )}
    }

    mvn compile; cd target/classes; scala secondScala.App



# Misc

Setup sbt to publish to your maven repository: 

* [ref1](http://brizzled.clapper.org/id/100/)
* [ref2](http://code.google.com/p/simple-build-tool/wiki/Publishing)
* [ref3](https://github.com/harrah/xsbt/wiki/Publishing)
* [ref4](https://github.com/harrah/xsbt/wiki/Resolvers)
* [ref5](http://code.google.com/p/simple-build-tool/wiki/Publishing)
* [Build File Example](https://github.com/harrah/xsbt/wiki/Full-Configuration)

## setup

Setup xsbt first:

[ref](https://github.com/harrah/xsbt)

    git clone git://github.com/harrah/xsbt.git
    cd xsbt

setup latest android-plugin

    git clone https://github.com/jberkel/android-plugin.git 
    cd android-plugin 
    xsbt 
    update 
    publish-local 



[ref1](http://nevercertain.com/2011/02/03/scala-android-intellij-win-part-1-prerequisites.html)
[ref2](http://nevercertain.com/2011/02/03/scala-android-intellij-win-part-2-simple-build-tool.html)

    android-sdk-linux_x86/tools

    Click 'Available Packages'
    Expand 'Android Repository'
    Check the box that says 'Android SDK Tools, revision 7'
    Click 'Install Selected'
    Click 'Accept All' to accept all licenses
    Click 'Install'


# SCALA LANGUAGE REFERENCE

## Functions/Methods

    def: myFunc( argName: String ) {
       ...
    }

    def max(x: Int, y: Int): Int = if (x < y) y else x

max: (Int,Int)Int

Formula:

A Scala function definition looks like this:

    def [function-name] ([parameter-name]: [parameter-type]) : [return-type] = [function-body]
    
so

    def taste (food: Consumable) : Opinion = evaluate(food)

defines a function called `taste` that takes a `Consumable` as a
parameter named `food` and returns an `Opinion`. It calls `evaluate` and
returns the result, which must be an `Opinion`

The last value is returned - no explicit return is required, but since
the language is strongly typed there is protection against
accidentally returning meaningless values of the wrong type

## Function Literals

The syntax for a function literal is a list of named parameters, in
parentheses, a right arrow, and then the body of the function.

![Image depicting a function literal and its parts](images/functionLiteral60.jpg "The syntax of a function literal in Scala")

## Functions as Arguments

In the following code, the function oncePerSecond is defined with one
argument of type: `() => Unit`.  A function with *NO* arguments and
returns `Unit`.  Exactly what `timeFlies` is.
 
    object Timer {
      def oncePerSecond(callback: () => Unit) {
        while (true) { callback(); Thread sleep 1000 }
      }
      def timeFlies() {
        println("time flies like an arrow...")
      }
      def main(args: Array[String]) {
        oncePerSecond(timeFlies)
      }
    }

## Unit (java: void)

scala.Unit, is Scala's analogue to void in Java. The main difference
between Scala's Unit and Java's void is that Scala lets you write down
a value of type Unit, namely (), whereas in Java there is no value of
type void.

## vals & vars

Scala differentiates between vals, variables that are assigned once
and never change, and vars, variables that may change over their
lifetime.

## Defining Variables/Values

[val|var] [variable name] : [type] = [value to assign]

    val name : java.lang.String = "Fenton Travers"

Type comes *AFTER* variable/value name.

## Static Methods

Static members (methods or ﬁelds) do not exist in Scala. Rather than
deﬁning static members, the Scala programmer declares these members in
singleton objects

    object HelloWorld {
      def main(args: Array[String]) {
        println("Hello, world!")
      }
    } 

# Data Structures

## Arrays

Access an element in an array by specifying an index in parentheses.

    // Say hello to the first argument
    println("Hello, "+ args(0) +"!")

# Misc

## Incrementing integers

Java's ++i and i++ don't work in Scala. To increment an integer in
Scala, you need to say either i = i + 1 or i += 1.


## Classes

One important difference is that classes in Scala can have parameters. This
is illustrated in the following deﬁnition of complex numbers.

    class Complex(real: Double, imaginary: Double) {
      def re() = real
      def im() = imaginary
    }

These arguments must be passed when creating an instance of class
Complex, as follows: 

    new Complex(1.5, 2.3). 

The class contains two methods, called re and im, which give access to
these two parts.

## Looping

Say we want to iterate over two lists, using successive values in the
lists somehow.  What does this look like in an imperative language? In
pseduo-code:

    list1 = "a", "b", "c"
    list2 = "1", "2", "3"
    combinedList = new List

    for ( int i = 0; i < 3; i++ ) 
      combinedList.add( list1[i] + list2[i] )

would yield a list with the following elements:

    a1, b2, c3

So how do we do a similar thing in Scala?  Lets first define a couple
of lists:

    val alphaList = List("a", "b", "c")
    val numericList = List("1", "2", "3")

### zipping two lists

Next we'd want to `zip` these two lists together, that is produce a
single list of pairs:

    val alphaNumericList = alphaList zip numericList

When we put the above on the Scala REPL we see the type
alphaNumericList is 

    List[(java.lang.String,java.lang.String)]

Now we have a single list, lets create a function that will use this
list, concatenating successive pairs:

    val pairFunction( (firstPart:String,secondPart:String) : List[String]

    for ( (alpha,numeric) <- alphaNumericList ) yield println alpha + numeric


# Garbage

the rest below is preserved as it might be useful in the future:

List the different templates you can use with `giter8` aka: `g8`

    g8 --list

This one looks good for starting off:

    chrislewis/simple-scala-project         g8 template for a simple scala project

So run:

    g8 chrislewis/simple-scala-project

Accept the defaults.

[ref](https://github.com/mpeltonen/sbt-idea)

In your project created by giter8,


This will build a basic android app shell project:

    g8 jberkel/android-app

accept all defaults

    cd my-android-project/

## Build File Garbage

  override def managedStyle = ManagedStyle.Maven

  lazy val publishTo = Resolver.sftp("linux1", "linux1.hk.oracle.com", "/var/www/html/maven2")
 credentials += Credentials(Path.userHome / ".ivy2" / ".credentials")

object Resolvers {
  val sunrepo    = "Sun Maven2 Repo" at "http://download.java.net/maven/2"
  val sunrepoGF  = "Sun GF Maven2 Repo" at "http://download.java.net/maven/glassfish"
  val oraclerepo = "Oracle Maven2 Repo" at "http://download.oracle.com/maven"

  val oracleResolvers = Seq (sunrepo, sunrepoGF, oraclerepo)
}


# Lift Web Framework

## Ref

[Lift Framework](http://scalalift.com/)

## Intro

A simple example:

hidden-templates/fancy.html

    <html><body class="fancy">
        <lift:bind name="contents"/>
    </body><html>

fish/tropical.html

    <lift:surround with="hidden-templates/fancy" at="contents">
        Floating above tropical fish is like being in a colorful cartoonland.
    </lift:surround>

Results in:

    <html class="fancy"><body class="fancy">
        Floating above tropical fish is like being in a colorful cartoonland.
    </body></html>

You can also simply embed a template inside another one using the
*embed tag:

    <lift:embed what="hidden-templates/footer"/>

Second Pass Notes:

no extension is provided on the template name to allow flexibility for
localization suffixes, file types, etc.  hidden-templates is not
required in the path.  if only the filename (without extension) is
specified, the whole view path will be searched.


## Maven

    mvn org.apache.maven.plugins:maven-archetype-plugin:1.0-alpha-7:create -DarchetypeGroupId=org.scala-tools.archetypes -DarchetypeArtifactId=scala-archetype-simple -DarchetypeVersion=1.1 -DremoteRepositories=http://scala-tools.org/repo-releases -DgroupId=your.proj.gid -DartifactId=your-proj-id

I updated the scala version in the properties section like so:

    <scala.version>2.9.0-1</scala.version>



* Make the project suitable for importing into IntelliJ

    gen-idea

to make the project compatible with IDEA IntelliJ.  Don't worry about
the warnings.  They are just trying to download javadocs & sources for
the dependent libraries, not all of which have those items...thus the
warning messages.

Import it into IntelliJ.  Close any projects if you have one open.
Then do:

    File > Open Project

Navigate to your project folder, and click `OK`.
