Start `screen`

    screen

To send a command to `screen` and not the shell

    Ctrl-A


Commands                        | Meaning
------------------------------- | -------------------------------------------------
screen -ls                      | list running screens
:multiuser on[RET] :acladd[RET] | Turn a screen into a multi user screen (shareable)
screen -x [screen name]         | Join a shareable screen 
H                               | create a running log of session
:quit                           | Kill/Exit screen
c                               | create a new window
n                               | (n)ext window
p                               | (p)rev window
k                               | (k)ill a window
d                               | (d)etach from a window.  You can re-attach later.
screen -r [screen name]         | (r)e-attach.  Use screen name from screen -ls command
M                               | Monitor screen for activity
_                               | Monitor a screen for silence


# Details

## Monitoring

This function will tell you when activity on a `screen` has either
started or stopped.  This could be very useful if you have a long
running process and would like to be alerted when it is finished.

When the monitor detects activity or silence, you will get an alert at
the bottom with the window number. To quickly go to that window, use
“Ctrl-A” “ (thats a quote mark, ctrl-a then a “)

To stop monitoring, go to that window and undo the monitor with the
same command. For example, to stop monitoring for activity you would
use “Ctrl-A” “M” again.

## Sharing a Screen

You can use screen to share your session.

The first user in his screen session does the following:

    [Ctrl-A]:multiuser on[RET]
    [Ctrl-A]:acladd[RET]

The second user then can get then get the name of the above session
with `screen -ls`.  Below is a sample:

    $ screen -ls
    There are screens on:
        13009.pts-2.oracle	(Attached)
        12809.pts-0.oracle	(Multi, attached)
        13843.pts-5.oracle	(Detached)
    3 Sockets in /tmp/screens/S-oracle.

Now the one we care about is the one that has: `(Multi, attached)`,
 i.e.: `12809.pts-0.oracle`.  Now the second user starts their own
 screen session with the command:

    $ screen -x 12809.pts-0.oracle

# Tutorials

[Screens Tutorial](http://www.rackaid.com/resources/linux-screen-tutorial-and-how-to/)

# Screen and SSH tips

[ref](http://www.itworld.com/it-managementstrategy/261500/16-ultimate-openssh-hacks)

## SSH tip #13: Attach to a remote GNU screen session

You can attach a GNU screen session remotely over SSH; in this example
we'll open a GNU screen session on host1, and connect to it from
host2. First open and then detach a screen session on host1, named
testscreen:

    host1 ~ $ screen -S testscreen

Then detach from your screen session with the keyboard combination
Ctrl+a+d:

    [detached from 3829.testscreen]

You can verify that it's still there with this command:

    host1 ~ $ screen -ls

There is a screen on:

    3941.testscreen (03/18/2012 12:43:42 PM) (Detached)
    1 Socket in /var/run/screen/S-host1.

Then re-attach to your screen session from host2:

    host1 ~ $ ssh -t terry@uberpc screen -r testscreen

You don't have to name the screen session if there is only one.

## SSH tip #12: Launch a remote screen session

What if you don't have a running screen session? No worries, because
you can launch one remotely:

    host1 ~ $ ssh -t user@host2 /usr/bin/screen -xRR
    
    
