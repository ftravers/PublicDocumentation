CSS: style.css

# Cascading Style Sheets

## Linking style sheet to html

    <LINK REL=StyleSheet HREF="style.css" TYPE="text/css"/>

## class

    <p class="myclass">Fenton</p>

When specifying *classes* in a *.css prefix them with a do (.)

    .myclass {
        font-size: 1.5em;
    }

## id

    <p id="myId">Fenton</p>

When specifying *div’s* in a css file, prefix it with a hash (#)

    #myId {
        font-size: 1.5em;
    }

## Comments

use: java style: `/* */`

## The Box Model

![image](images/box_model.gif)

`margin, border, padding` plus `left, right, top, bottom` as in
`margin-left`. `height, width`. Here is a sample:

    #footer {
        margin: 10px;
        border-top: 5px;
        border-bottom: 5px;
        border-left: 2px;
        border-right: 2px;
        padding: 2px;
        height: 50px;
        width: 200px;
    }

### References

-   http://www.vanseodesign.com/css/css-positioning/
-   http://www.instantshift.com/2009/11/16/css-box-model-the-foundation-for-improving-your-css/

## Inline versus Block

Block elements follow each other vertically from top to bottom.
Examples: P, DIV or TABLE.

Inline elements flow from left to right first, then wrap around beneath.
Examples: B, I or SPAN and actual content like text and images.

![image](images/css-normal-flow.png)

Any *inline* or *block* can be converted to the other by using the
following:

    display: block;
    display: inline;

## Positioning

Position attribute can take one of five values: absolute, relative,
fixed, static, inherit

### Float

How Elements Float

-   Non-positioned, non-floated, block-level elements act as if the
    floated element is not there, since the floated element is out of
    document flow

![image](images/css1.png)

In the above example, the `<p>` element is a **block**-level element, so
it ignores the floated element, spanning the width of the container
(minus padding). All non-floated, block-level elements will behave in
like manner.

The text in the paragraph is **inline**, so it flows around the floated
element.

Elements are floated horizontally, this means that an element can only
be floated left or right, not up or down.

A floated element will move as far to the left or right as it can.
Usually this means all the way to the left or right of the containing
element.

The elements after the floating element will flow around it.

The elements before the floating element will not be affected.

If an image is floated to the right, a following text flows around it,
to the left:

    img
    {
        float:right;
    }

### Clearing Floats

Layout issues with floats are commonly fixed using the CSS clear
property, which lets you �clear� floated elements from the left or right
side, or both sides, of an element.

Let�s take a look at an example that commonly occurs � a footer wrapping
to the right side of a 2-column layout:

![image](images/css4.png)

    #footer {
        clear: both;
    }

![image](images/css5.png)

The clear property will clear only floated elements, so applying clear:
both to both columns would not cause the footer to drop down, because
the footer is not a floated element.

So use clear on non-floated elements, and even occasionally on floated
elements, to force page elements to occupy their intended space.

### Fixing the Collapsed Parent

One of the most common symptoms of float-heavy layouts is the
�collapsing parent�. This is demonstrated in the example below:

![image](images/css6.png)

Notice that the bottom of the floated image appears outside its parent.
The parent does not fully expand to hold the floated image. This is
caused by what we discussed earlier: the floated element is out of the
natural document flow, so all block elements will render as if the
floated element is not even there. This is not a CSS bug; it�s in line
with CSS specifications. All browsers render the same in this example.
It should be pointed out that, in this example, adding a width to the
container prevents the issue from occurring in IE, so this would
normally be something you would have to resolve in Firefox, Opera,
Safari, or Chrome.

#### Solution 1: Float the container

The easiest way to fix this problem is to float the containing parent
element:

![image](images/css7.png)

Now the container expands to fit all the child elements. But
unfortunately this fix will only work in a limited number of
circumstances, since floating the parent may have undesirable effects on
your layout. Now the container expands to fit all the child elements.

#### Other fixes

http://www.smashingmagazine.com/2009/10/19/the-mystery-of-css-float-property/

## Images

## Rounded Corners CSS3

    <div style=" background-color: #ccc; -moz-border-radius: 5px;
    -webkit-border-radius: 5px;
    border: 1px solid #000;
    padding: 10px;" >

# Misc

## margin

    margin:25px 50px 75px 100px;
    
    top margin is 25px
    right margin is 50px
    bottom margin is 75px
    left margin is 100px

# Cookbook

## color red section in code

Desired Outcome: html that is presented as code (i.e. fixed width
arial look), that has a section of it highlighted in red to draw the
users attention to a specific piece of the code while remaining in the
context of the code.

# References

-   [Inheritance](http://dorward.me.uk/www/css/inheritance/)

This article is useful for knowing how to apply *DRY* to css.

# Glossary

DRY
: Dont Repeat Yourself

