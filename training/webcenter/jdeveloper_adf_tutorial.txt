Table of Contents:
	> create a simple JSF page, with a managed backing bean
	> JSF Navigation
	> Deploy your application to a standalone WebLogic Server
	> Integrate OpenWCM with JSF
	> Add a jar library to JDeveloper
	> Mobile iPhone development
	> Database integration to JSF page

---------------------------------------------------------
TUTORIAL: create a simple JSF page, with a managed backing bean

OVERVIEW:
This tutorial will give you the understanding of how you can have components (input boxes for example)
talking to other components on the page.  A java file (managed_bean) is used in the background to allow
you to control this communication inside the page.

SOURCE: JDev built-in trainings: 'Build a Simple JSF Application'
SOFTWARE & VERSIONS: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

STEPS:

==> New Application > Generic Application > Finish
==> right-click Project1 > New > Web Tier > JSF > JSF Page > OK > name: Start.jsp > OK
==> Component Palette select JSF > Expand HTML panel > Drag and Drop input Text to Start.jsp in Design view
==> Drag-and-Drop Command Button > Property Inspector > Common > Value > change text to 'Click here'
==> Component Palette select HTML > Expand Common panel > Drag and Drop Line Break next to command button.
==> Structure Window, right-click br and choose Insert after br > JSF HTML > Output Text > OK
==> Property Inspector of the output text component > Common section > delete the default text in the Value field and press Enter.
==> Main Menu > Design > Page Properties > Component Binding > check Auto Bind > new > 
Bean Name: backing_start > Class Name: StartInfo > Package: project1.backing > OK > OK

Key Take-Away <Start>: 
---------------------------------------------------------
When you enable automatic component binding, JDeveloper automatically creates a backing bean for the JSF page, if 
one does not yet already exist for the page. A backing bean is a JSF managed bean that contains logic and properties 
for UI components on a page. A managed bean is a JavaBean whose instantiation and scope you declaratively set up in 
the faces-config.xml file. More details about managed beans are described in another Tell Me topic. 

A backing bean is used to hold: properties that "back" the values in the UI components on the page action methods 
that handle events for UI components on the page instances of UIComponents from the page's UIComponent tree so that
 you can programmatically manipulate the user interface (for example, show/hide components) 

When you insert a UI component on a page that uses automatic component binding, JDeveloper does the following: In 
the backing bean, inserts a bean property and accessor methods for the component. For example:

private HtmlInputText inputText1;
public void setInputText1(HtmlInputText inputText1) {
  this.inputText1 = inputText1;
}
public HtmlInputText getInputText1() {
  return inputText1;
}
In the page, uses the binding attribute on the component to bind the component instance to the bean property.
 For example: <h:inputText binding="#{backing_start.inputText1}" id="inputText1"/>, where backing_start is the 
bean name. 

Note: In the Property Inspector for a component that is automatically bound by JDeveloper, the Binding property
 field will not be available for editing. 

JDeveloper does not create managed properties for any of the properties on the backing bean. Managed properties
 are any properties of the bean that you would like populated with a value when the bean is instantiated. If you
 wish the bean to be instantiated with certain property values, you must add the managed properties configuration
 entries in the faces-config.xml file manually. 

Regardless of whether you enabled automatic component binding at page creation time or design time, at any 
time during page design you can turn off or turn on automatic component binding by using the Design  Page 
Properties menu to deselect or select the Auto Bind checkbox. For example, if you want JDeveloper to automatically 
generate properties and accessor methods for some components you are adding to a page, turn on automatic component 
binding just before adding the components, then turn it off after you're done adding. 

In the XML source code for a page that uses automatic component binding, JDeveloper inserts an auto binding 
comment line at the bottom of the file. For example: 
<%-- 
oracle-jdev-comment:auto-binding-backing-bean-name:backing_start
--%>


In the next step of this cue card, you will continue with enabling automatic component binding by creating
 a new managed bean. After you complete the next step, you will see an auto binding comment line in the 
source code of the Start.jsp page.
-------------------------------------
Key Take-Away <End>: 

==> double-click command button > verify backing_start is shown in Managed Bean > OK
==> editing StartInfo.java > method: commandButton1_action > add code:
// Add event code here...
outputText1.setValue("Hello "+inputText1.getValue());
return null
==> right-click Start.jsp > Run

========================================================
TUTORIAL: JSF Navigation

OVERVIEW:
This tutorial will...

Source: JDev built-in trainings: 'Create JSF Page Navigation'
Software Version: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

STEPS:
> create a new application
> right-click project > new > Web Tier > JSF > JSF Page Flow and Configuration (faces-config.xml) > OK

> Component Palette > JSF Diagram Objects page > Components panel > click and drag JSF Page to the diagrammer > Accept the default file name
> repeat above step so have two pages
> Component Palette > click JSF Navigation Case > on the diagram, click the first page icon you created and then click the second page icon. 
> Repeat above but make direction from second to first.  Label them 'submit' and 'return' respectively.
> Double click pages so to create the JSF Page and name them Order and Accept respectively.
> Edit Order.jsp > put in a text box and command button.
> Auto bind this page to a managed bean as in tutorial: "create a simple JSF page, with a managed backing bean" above.
> double-click command button > OK to accept the backing bean > enter following code at method: 
public Object commandButton1_action() {
    // Add event code here...
    if (inputText1.getValue().toString().equals("guest"))
       return "success";
    else
       inputText1.setValue("Guess Password Again!");
    return null;
}
> put a button on the second page that takes you back to the first.
> Run the first JSF page.

Key take aways:
------------------------------------
* Draw out your JSF pages.  
* Create navigation links between them with string values as their names.
* Put buttons on the pages that return the value corresponding to the navigation cases above.
* Put code into the buttons commandButton1_action() method, return the string of the case you want to take.
------------------------------------

* When you draw your navigation this creates an xml table like:

<navigation-rule>
  <from-view-id>/Order.jsp</from-view-id>
  <navigation-case>
    <from-outcome>success</from-outcome>
    <to-view-id>/Accept.jsp</to-view-id>
  </navigation-case>
</navigation-rule>
<navigation-rule>
  <from-view-id>/Accept.jsp</from-view-id>
  <navigation-case>
    <from-outcome>return</from-outcome>
    <to-view-id>/Order.jsp</to-view-id>
  </navigation-case>
</navigation-rule>

* When you specify an action="" on a link or button this can go to the backing_bean method
action="#{backing_login.commandButton1_action}"
and it will return a string corresponding to the 'success' or 'failure' cases above.

=========================================
TUTORIAL: Deploy your application to a standalone WebLogic Server

OVERVIEW:
This tutorial will...

SOURCE: JDev built-in trainings: 'Create an EJB Session Bean'
SOFTWARE & VERSIONS: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

STEPS:
> Create a new application and build a simple JSF page as in tutorial: "create a simple JSF page, with a managed backing bean"
> Main Menu: click View > Application Server Navigator
> Right-click Application Servers > New Application Server > follow prompts
> Right-click project > New > General > Deployment Profiles > WAR File
> Right-click project > Project Properties > Deployment > webapp1 (WAR File) > edit > File Groups > WEB-INF/lib > Contributors > check all > OK > OK
> Right-click project > Deploy > webapp1 to wls
> Test with: http://wls:7001/Application4-Project1-context-root/faces/untitled1.jsp
========================================================
TUTORIAL: Deploy your application to Oracle Portal

OVERVIEW:
This tutorial will show you how to develop a simple portlet and then deploy
that so you can see the portlet as a wsrp portlet in oracle portal

SOURCE:
SOFTWARE & VERSIONS: 10.1.2.3.0 (Build 1936)

STEPS:



========================================================
TUTORIAL: Integrate OpenWCM with JSF

OVERVIEW:
To perform this tutorial you will need a running content server with openWCM installed and working.  Please build
a basic wcm page so as to generate a placeholder definition and a contributor file.  Also have JDeveloper installed
and working too.

SOURCE: my brain
SOFTWARE & VERSIONS: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

Notes:
Built-In JDeveloper WLS: 
http://127.0.0.1:7101/console
username: weblogic 
password: weblogic1

http://127.0.0.1:7101/owcm-jsf/faces/untitled1.jsp


Development cycle is kicked off by debugging a jsp.  That will cause the application to
undeploy and redeploy on the integrated WLS.
========================================================
TUTORIAL: Add a jar library to JDeveloper

OVERVIEW:

SOFTWARE & VERSIONS: 10.1.2.3.0 (Build 1936)

Steps:
Right click project > Project Properties > Libraries > New (bottom one)
Enter Library Name > Location: User Libraries > Class Path > Edit > Add Entry

Notes:
========================================================
TUTORIAL: Mobile iPhone development

OVERVIEW:


SOURCE: 
http://www.oracle.com/technology/pub/articles/huang-iphone.html

SOFTWARE & VERSIONS: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

Steps
> Modify <JDeveloper Install Home>/jdev/extenstions/oracle.wireless.dt.jar > ( oracle/wireless/dt/dc.xml ) as per the first html tutorial source page above
Note it is a bit tricky to get the extensions.xml file into the jar file but a command like: 'jar uvf oracle.wireless.dt.jar META-INF/extension.xml' can
help after you have done a 'jar cvf oracle.wireless.dt.jar oracle' with the modified dc.xml file.
> File > New > General > Applications > Fusion Web Application (ADF) > OK > Finish
> File > New > General > Project > Generic Project > OK > shuttle over 'Mobile Browser' in Project Technologies > Finish
> File > New > Web Tier > JSF > JSF Page > OK > ensure 'Render in Mobile Device' is checked > OK
> Select 320 X 480 at top of untitled1.jsp page to get the iPhone dimensions.
> Put the following line in (between <trh:head...> and <trh:body>) so the iPhone doesn't zoom out:
<trh:head title="untitled1">
<meta name="viewport" content="width=device-width; initial-scale=1.0; maximum-scale=1.0;">
  <trh:body>

========================================================
Tutorial: Database integration to JSF page

This tutorial shows how to:
	* Create a database (SQLDeveloper)
	* Create a table (JDeveloper > Database Navigator)
	* Connect table to ADF Business Component
	* Work with table data through web using JSF
	
==> create a database:

create temporary tablespace chin_temp tempfile '/usr/lib/oracle/xe/oradata/chin_temp.dbf' SIZE 10M REUSE AUTOEXTEND ON NEXT 5120K MAXSIZE UNLIMITED;
create tablespace chin_sys datafile '/usr/lib/oracle/xe/oradata/chin_sys.dbf' size 10M reuse autoextend on next 5120k maxsize unlimited;
create USER chin_user IDENTIFIED by chin_user temporary tablespace chin_temp default tablespace chin_sys quota unlimited on chin_sys;
grant connect, resource to chin_user;

==> Create DB Table
Once we've created a database lets create a table from within the gui editor for tables.  Kind of handy.  Then we are going to get these tables up 
onto a web page so we can edit the tables from the web page pretty quickly.

* Create a new generic application in JDeveloper.

* Open database viewer and create a connection to the database: View > Database Navigator.  Connect as the user above: system.

* create the db
	* create the folder as root, update permissions
[root@dbxe /]# cd /usr/lib/oracle/xe/oradata
[root@dbxe oradata]# mkdir adf
[root@dbxe oradata]# chmod 777 adf

* create a simple table.
	* create a new connection with the user we created above: chin_user
	* create your table.
		I just used the gui for this, creating fields first, last, age, gender, id.

* Now lets connect the table up to an ADF Business Component:
	* right click on your project in Application Navigator > New > Business Tier > ADF Business Component > Business Components from Tables
	* click magnify glass to search for the connection you made above
	* select auto-query
	* shuttle USERS over. Next.
	* make an updateable view object.  Shuttle it over. Finish


* Now lets get the UI going, lets get the table onto a JSF page.
		* Application Navigator > Projects > Project1 (right click) > New > Web Tier > JSF > JSF Page
		* lets get the data on the page.
			* Application Navigator > Data Controls > AppModuleDataControl > UsersView1 (or whatever your updateable view is called)
			* drag and drop this on untitled.jspx
			Select Forms > ADF Form...
			Select 'Include Navigation Controls'
		* lets have a look at it. Goto Application Navigator > Projects > Project1 > Web Content > untitled.jspx right click and choose Run



=========================================
INCOMPLETE

* Create a web service

http://www.oracle.com/technology/products/jdev/11/cuecards111/j2ee_set_16/ccset16_ALL.html

Key take aways:

* You must deploy your web service to a proxy, kind of like making it run in a real application server.
This way you can actually test it from anywhere as a regular web-service.

=========================================
...INCOMPLETE...
TUTORIAL: Create an EJB Session Bean

OVERVIEW:
This tutorial will...

SOURCE: JDev built-in trainings: 'Create an EJB Session Bean'
SOFTWARE & VERSIONS: JDeveloper Studio Edition Version 11.1.1.2.0, Build JDEVADF_11.1.1.2.0_GENERIC_091029.2229.5536

STEPS:
> Creat a new application
> Right-click project select > Business Tier > EJB > Session Bean
=========================================

TUTORIAL: Change the JDK version JDeveloper uses

SOURCE: http://ws-rx.blogspot.com/2006/11/changing-version-of-jdk-used-by.html
SOFTWARE & VERSIONS: 10.1.2.3.0 (Build 1936)

STEPS:
While JDeveloper is not running, locate the embedded JDK on disk and rename (or delete) that directory. For me, it was C:\opt\jdev\jdk. Once it's done, restart and you will by asked to locate the version of the JDK you want to use.

