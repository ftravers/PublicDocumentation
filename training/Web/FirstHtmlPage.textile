h1. A word about web pages

A web page in its fundamental aspect is a text document.  As such, to create a web page, you would want to use a text editor.  There are three categories, that can lead to confusion.  There are text editors, What You See Is What You Get (wysiwyg) HTML editors and there are word processors.  In my opinion to learn how to create web pages it is best to use a simple text editor.  Although, initially this might not be the fastest way to create a web page, it allows you to learn the fundamentals of how web pages work.  Finally, word processors like Microsoft Word, should be avoided as well.

Now that we are clear that we just need a text editor to create our first HTML pages, all that you need to 'see' the result of your HTML code is a web browser.  With these two simple tools you can go 90% of the way of creating great web sites.  However, the final essential aspect of a web page is putting it up on the web.  Obviously you simply editing a text file on your own computer won't create a web page on the internet that other people can access.  But we can worry about that later.

So everyone has a web browser, but not everyone has a good text editor.  As such, there is a handy little option which is to use an online text editor.  This saves you from needing to download and install a text editor for yourself.  See: "Bespin":bespin.html for a fairly good online text editor that can be use pretty easiliy.

Below, I make reference to a text editor called Eclipse.  Feel free to use it, or "Bespin":bespin.html mentioned above, or your favorite text editor.  One additional comment.  I like to work in groups with other people and sharing our code all around is more fun, so I often encourage the use of a Version Control System(VCS).  "Eclipse":../machineSetup/eclipse.html and "Bespin":bespin.html can both connect to a VCS, however, getting it setup right is often a little tricky.  I'll try to make sure that the two pages on "Eclipse":../machineSetup/eclipse.html and "Bespin":bespin.html, both have video tutorials on that to show how it works. 

h1. First HTML Page

Every _HTML_ page must look like the following at a minimum.

bc. 
<html>
	<head><title></title></head>
	<body>
	</body>
</html>

Now you enter what you want to show up in the page between the @<body></body>@ tags.

Now in Eclipse there are a couple of neat features.  When you finish an openning tag, such as @<html>@ it will automatically add the closing tag @</html>@.

The other interesting feature is that it will suggest tag names for you as well. At the top of your page hit Ctrl-Space, you will see a bunch of options you can select from try adding a few of these options.  When they come up you can type the first letter of the option to select them.

Now you can quickly format your page by right clicking in your page and choosing _Source_ > _Format_.  This will neatly reformat your whole document.

Now put some content between the @<body></body>@ tags.  For example, type "Hello World".  Save the document by typing _Ctrl-S_. 

Now in the left hand window labelled Package Explorer, right click your html file and choose _Open With_ > _Web Browser_.  A new tab will open that shows you your html page when it is viewed with a Browser.  You can go back to your HTML page by selecting the tab across the top.

Go back to your HTML document and add some more content.  Save it and go back to the Browser window and click on the _Refresh_ icon.  It looks like two yellow arrows in a circle, next to the red square.

Now lets add an image to you web page.  Minimize Eclipse and go to your favorite browser (Firefox, Internet Explorer, or whichever other one you prefer).  Go find a nice image on the internet and save it to your desktop.  Images with 'jpg', 'png', or 'gif' are all fine file extensions.  

Find out the location of your project folder.  Go into Eclipse and right click on your project and select _Properties_ at the bottom of the menu.  You will see an entry for _Location_.  This is the folder where you need to move your image into.

Go back to Eclipse and right click on your project and select _Refresh_, the image should now show up in your project folder.  In your HTML page you can now enter the HTML code to include an image.  Somewhere between the @<body></body>@ tags hit Ctrl-Space to enter into _Assist_ mode, choose _img_.  

Type the openning angle bracket @<@ and wait for content assist to auto pop up and type @img@ to get the html @<img>@ tag to auto-complete.  The attribute _src_ is where you will put the filename of your image.  Put the filename between the double-quotes.  Ignore the _alt_ property for now.

Your page will now look like this:

bc. 
<html>


Now get the image into your project directory.  You can drag the image from where you saved it (your desktop) and drop it on your project folder in Eclipse.



Lets give you some more space to work on your HTML document.

You will notice each window at the top right contains two buttons.  A small flat rectangle on the left and a bigger rectangle with a horizontal line on the right.  These are the minimize and maximize buttons.


h1. Eclipse Editor

Make a basic web page.

You put HTML into the web page document.  We will use Eclipse to create the HTML page.

Open Eclipse.

The first thing you need to do is to create a project in the left hand side project explorer window.  Right click in the middle of the Project Explorer window and select _New_ > Project.

In the _New Project_ wizard, select Java Project from the list of options and click _Next_.

In the _New Java Project_ wizard window, type a new _Project name_, for example _project1_.  Click _Finish_.

The wizard will now ask you if you want to view this project in the Java perspective, just click _Remember my decision_ and click _Yes_.

Right click on you new project and select _New_ from the top of the menu and then select _File_.  Enter a name for your first html file, and give it the _.html_ extension.  You could call it _file1.html_, then click _Finish_.

Now type in you _HTML_ into this page.

h2. Table

A table is used primarily for laying out a page.  It should not be used exclusively, as Cascading Style Sheets(CSS) for most layout concerns.  Regardless it still is quite useful.

bc. 
<table border="1" width="100%">
	<tr>
		<td>
			This is a cell
		</td>
		<td>
			this is the second column in first row
		</td>	
	</tr>
	<tr>
		<td>
			this is second row
		</td>
	</tr>
</table>

@tr@ means table row, @td@ means table data, it's what goes into the cell itself.


	
h1. Glossary

{glossary}