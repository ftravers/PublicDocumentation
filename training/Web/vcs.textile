"home":../../index.html > "Training":../index.html > VCS: Version Control System

p(toc). Table of Contents

{toc}

h1. Intro

When first hearing about a Version Control System(VCS), it can be a bit confusing/daunting/etc.  Well don't worry I'll walk you along the path from knowing nothing to being able to use and interact with a VCS.  At the heart of a VCS is the concept of sharing files with other people.  Traditionally when you want to share files with someone you email them a COPY of the file.  But that is a huge problem.  You now have two copies and like a branch in a tree, or a a fork in the road, as soon as any changes are made to either file...to get back on the same page you need to resend a copy from one person to the other.

What a VCS does is maintain a MASTER copy.  So what we do is we take a copy from the MASTER (usually a server out on the internet) down onto our local computer.  We make changes to the file.  Then we upload our changed version up to the master (we can just call it the VCS) and the VCS notices that this is a new version and it creates a second copy of the file and calls it version 2 of the file.

Now normally when we begin our work day, we check with the VCS to see if anyone else has updated files that we have a copy of...if so we ask for the latest copy.

Now in simple projects this will be sufficient 90% of the time.  But when you start getting busy and working with other people you might have a situation where you both edit the same file and want to put your changes back up to the VCS.  Well the first person will update version 1 of the file to version 2.  But when you go to save the file to the VCS it sees that your version started at version 1 and it's current version is version 2, so a new save would make that version 3...so if you just made your version the new version...you'd lose the changes made for version 2.  Well this is where the VCS system comes in handy.  It will look at version 2 and your version and automatically merge the two files, preserving the changes from version 2 into version 3!

Those are the basics of a VCS.  There are some other powerful reasons to make use of a VCS, which I'll go into in the next section.

h1. VCS Benefits

The main benefit from my perspective is that now you can share files in an easy way (not over email!!!) with other people on a project.  When you are working on a web project with programming involved, you can learn from your team mates.  You can look at their code, ask them to fix up your code, and this is a quick way to learn new technologies.  HTML, CSS, JavaScript, Java, etc..., can all be daunting to learn, so being able to share files with someone who can teach you makes both of your lives a heck of a lot easier.

h1. Fears about VCS

If you just start using a VCS you might be very afraid to work on files that other people are using, and especially afraid to check in your changes into the system so other people will see what you've done.  You may be worried about making mistakes or putting bugs into the files you are putting back on the VCS and then someone else will get upset with you!  Well keep in mind, any changes you make up there can always be undone.  You are NOT over-writing any files, you are adding a new file actually, it just gets a later version number...the older version is maintained, and the more experienced user will know how to revert to that version of the file.  So don't worry too much, the VCS was built with this issue in mind and it can easily handle and restore itself from this situation.  It is much better for you to experiment and become comfortable and use the system then it is to be afraid of the system and never get or give the benefits of sharing files with other people.

h1. Using a VCS

There is some basic terminology that it is useful to learn.  The first word to learn is to _checkout_ the source code.  This is the action of taking a copy from the VCS and putting it on your local computer.  Once you have the copy on your computer you will either modify the existing files or add new files.  Normally all the files will be checked out into a folder and you'll want to manage everything that goes into that folder with the VCS.  What I mean is that if you checkout a folder from the VCS onto your computer and then you add a file into that folder...you'll want the new file to get added into the VCS as well.  The termed used to put your changes back up onto the VCS is to _commit_ your changes.  Adding is also use when you are adding new files.  Finally, on a day to day basis we'll _update_ our version of the code with the latest version that exists on the VCS.  _Checking out_, _committing_ and _updating_ should get you through 95% of the tasks you need to when first starting out.

h1. Subversion

Subversion is one type of VCS that we will use.  Typically someone will provide you with a URL and a username/password pair.  Armed with these things you can begin using the Subversion VCS.  Normally, you'll have some program you use to edit the files that will come from the VCS.  Sometimes, these tools will have built-in support for VCS systems like subversion.  This is the case for Eclipse, and it is often a tools that I'll recommend to people to use.  I have different chapters that will help you use Subversion with Eclipse.

h1. Conclusion

Thats about all I'll say about VCS's for now.  The purpose of this article was to get you to feel comfortable with the idea of using a VCS and encourage you to want to start using a VCS.  If this article has been successful you'll now be wanting to try out a VCS, such as Subversion, to try out the things we talked about.  Good luck, be adventurous, and don't worry about wrecking anything, the system can handle it!  

h1. Glossary

{glossary}