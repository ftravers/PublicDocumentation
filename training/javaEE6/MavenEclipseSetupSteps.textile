"Training":../index.html > Maven Eclipse Setup

p(toc). Table of Contents

{toc}

h1. Introduction

This article shows how to setup a Java EE6 project using Eclipse, Maven and Tomcat.

h2. One time only step:

* Set your MVN_REPO classpath variable in eclipse (ensure eclipse is not running)

bc. mvn -Declipse.workspace=/Users/fentontravers/Documents/workspace4 eclipse:add-maven-repo

h2. Create a maven web app

h3. Create new project

* Right click in empty space in the Project Explorer window and choose @New > Other...@

!images/ee6_2.png!

* in Select a Wizard, choose @Maven Project@

!images/ee6_3.png!

* Click @Next@ and @Next@ again.

* At the _New Maven Project_ select @maven-archetype-webapp@

!images/ee6_4.png!

* Fill out _Group Id_ and _Artefact Id_ at a minimum, then click _Finish_.

!images/ee6_5.png!

h3. Update pom.xml

* add the following into your pom.xml

* (NOTE) you'll probably have a different web app name so make sure to keep your @<finalName>simpleWeb</finalName>@ intact with your cut and paste.

bc. 
	<repositories>
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
	</repositories>
	<dependencies>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>simpleWeb</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.0.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>2.8</version>
					<configuration>
						<downloadSources>false</downloadSources>
						<wtpversion>2.0</wtpversion>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

h3. Rebuild your eclipse configuration files 

bc. mvn eclipse:eclipse

!images/ee6_7.png!

h3. Add the Faces Servlet mapping into your web.xml

<filelocation> project/src/main/webapp/WEB-INF/web.xml
 
bc. 
    <context-param>
        <param-name>javax.faces.PROJECT_STAGE</param-name>
        <param-value>Development</param-value>
    </context-param>
    <servlet>
        <servlet-name>Faces Servlet</servlet-name>
        <servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
    </servlet>
    <servlet-mapping>
        <servlet-name>Faces Servlet</servlet-name>
        <url-pattern>*.jsf</url-pattern>
    </servlet-mapping> 

h3. Create your first view template

<filelocation>/src/main/webapp/home.xhtml

bc. 
<html 
	xmlns="http://www.w3.org/1999/xhtml" 
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html">
	<body>
		This is page one!
		<f:view>
			<h:form>
				<h:commandButton action="pagetwo" value="forward"/>
			</h:form>
		</f:view>
	</body>
</html>

h3. Launch your file

* Right click your file @home.xhtml@ and choose @Run As > Run on Server@

* When you see the following prompt, check off: _Always use this server when running this project_

!images/ee6_6.png!

h3. Finished

You should see something like the following if it works:

!images/ee6_8.png!

h3. Additional Steps

I've found doing the following is helpful for continued development:

h3. Update project order

* Create a folder: @java@ at: @src/main/@, right click and choose use as a source folder,

* right click @<project_name> > Build Path > Configure Build Path > Order and Export@

put your java folder at the top of the list


----------------------------------------------------------------

	==> Templating
-----------------------------------------------------------------

	==> String Externalization
		=> Create: 
src/main/resources/com/spicevan/languages/messages.properties
		=> with contents:
hello=Hello World!

		=> in src/main/webapp/home.xhtml put:
<html xmlns:f="http://java.sun.com/jsf/core">
<f:loadBundle basename="com.spicevan.language.messages" var="msgs" />
Greetings: #{msgs.hello}

	==> Alternative, perhaps better as we don't have to define in every page then.
You may want to only specify the message string once, to do so put the following
in your /src/main/webapp/WEB-INF/faces-config.xml

<?xml version="1.0"?>
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
              version="2.0">
  <application>
    <resource-bundle>
      <base-name>com.spicevan.language.messages</base-name>
      <var>msgs</var>
    </resource-bundle>
  </application>              
</faces-config>

-------------------------------------------------------------------





	



==> Internationalization

Set your firefox to desire the french language first:
Preferences > Content > Languages (choose) > put 'fr' at the top.  Reload the page.

		=> Do same for french version
src/main/resources/com/spicevan/languages/messages_fr.properties
hello=Bonjour Monde!


If a view is not associated with a locale explicity, JSF uses "Accept-Language" 
header in request data from browser to find out the locale to be picked. It 
compares the header's values with the ones configured in faces-config.xml and 
if no match is found default locale is selected. 

How to associate a view with a locale?

From: http://www.i-coding.de/www/en/jsf/application/locale.html

But my preferred solution is to use an custom ViewHandler, which extends 
the JSF ViewHandler [5] or the Facelets ViewHandler [6]. Only thing to 
use this class is to register it in the faces config file. 

<application>  <view-handler>de.icoding.CustomViewHandler</view-handler> </application>

In order to set the locale for all pages after own conditions, just overwrite the method 
calculateLocale. For example in an SEO application just write: 

public Locale calculateLocale(FacesContext context) { String path = null; 
path = context.getExternalContext().getRequestServletPath(); 
if (path.indexOf("/de/") > 0) 
 return Locale.GERMAN; else return Locale.ENGLISH; }













========================
==> Tutorials

http://www.javaserverfaces.org/get-started

Seems like a good tutorial:
http://www.vogella.de/articles/JavaServerFaces/article.html

JSF & JPA, persistence tutorial:
http://blogs.sun.com/carolmcdonald/entry/sample_application_using_jsf_spring

http://andyschwartz.wordpress.com/2009/07/31/whats-new-in-jsf-2/

http://info.rmatics.org/2009/10/17/jsf2_tutorial_0/

http://www.ibm.com/developerworks/java/library/j-jsf2fu1/index.html


========================
junk notes below



	=> Determin if you have maven installed
mvn --version
	=> locate it's location
which mvn
	=> go there and edit the conf file specifying your repo location
cd /usr/share/maven/conf
vi settings.xml 
sudo vi settings.xml
	=> go to your home folder and create a folder to hold your maven projects.
cd 
mkdir maven_tutorial
cd maven_tutorial/
	=> create a basic maven project.
mvn archetype:create -DgroupId=com.mytutorial  -DartifactId=simple
	=> set your MVN_REPO classpath variable in eclipse (ensure eclipse is not running)
mvn -Declipse.workspace=/Users/fentontravers/Documents/workspace2 eclipse:add-maven-repo
cd simple
	=> make your project suitable for using with eclipse
mvn eclipse:eclipse 
	=> run your project
java -cp ./target/simple-1.0-SNAPSHOT.jar  com.mytutorial.App 
	=> put your project in your repository for sharing
mvn install
cd ~/maven_tutorial/
	=> create a maven web app
mvn archetype:create -DgroupId=com.mytutorial -DartifactId=simpleWeb -DarchetypeArtifactId=maven-archetype-webapp
cd simpleWeb
mvn eclipse:eclipse 
	=> add this into your POM

	=> rebuild your eclipse configuration files 
	(note: this command will delete and then rebuild the eclipse files. This 
	means that you donâ€™t have to check-in these eclipse related files and folders into your source 
	control. You can add .project, .classpath and .settings files/folder to subversion ignore list.)
mvn eclipse:clean eclipse:eclipse
	=> build the war file
mvn package
	=> add the following to your pom.xml



<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.mytutorial</groupId>
	<artifactId>simpleWeb2</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>simpleWeb2 Maven Webapp</name>
	<url>http://maven.apache.org</url>
	<repositories>
		<repository>
			<id>maven2-repository.dev.java.net</id>
			<name>Java.net Repository for Maven</name>
			<url>http://download.java.net/maven/2</url>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<version>2.0.2</version>
		</dependency>
		<dependency>
			<groupId>taglibs</groupId>
			<artifactId>standard</artifactId>
			<version>1.1.2</version>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.1.2</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>simpleWeb2</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>2.0.2</version>
					<configuration>
						<source>1.5</source>
						<target>1.5</target>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<downloadSources>false</downloadSources>
						<wtpversion>2.0</wtpversion>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>
</project>


-----------

mvn eclipse:eclipse -Dwtpversion=2.0

	=> build the war file
mvn package
	=> add the following to your pom.xml
	
	
h1. Reference: Maven Commands 

see: "Maven":../machineSetup.html