"home":../../index.html > "Trainging":../index.html > "Java EE 6":index.html > First Time Setup

p(toc). Table of Contents

{toc}

h1. Introduction

This document will explain how to setup your system for developing modern dynamic web sites.

h1. Quick Version

Note I'll include sample statements, but they shouldn't be copied verbatim as they have MY project names etc...

* "Create a bare-bones Maven project":/maven.html#createProject

Modify -DgroupId & -DartifactId to reflect YOUR project names.

bc. mvn archetype:generate  -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false -DgroupId=com.oracle.git -DartifactId=MvnSesFe

* Modify the pom.xml.  Add the single dependency, update packaging to
  be war, and add 1.6 compiling.

bc. 
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.oracle.git</groupId>
	<artifactId>MvnSesFe</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>MvnSesFe</name>
	<url>http://maven.apache.org</url>
	<dependencies>
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-web-api</artifactId>
			<!--can put scope to provided if we are using an app server
      that will provide the required jars. -->
			<scope>compile</scope>
			<version>6.0</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>MvnSesFe</finalName>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>

* Add missing dirs:

bc. 
~$ mkdir MvnSesFe/src/main/webapp
~$ mkdir MvnSesFe/src/main/webapp/WEB-INF
~$ touch web.xml faces-config.xml sun-web.xml
~$ mvn eclipse:eclipse

* Put the following contents into the three 'touch'ed files above:

web.xml

bc. 
<?xml version='1.0' encoding='UTF-8'?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<display-name>Web Project</display-name>
	<context-param>
		<param-name>javax.faces.PROJECT_STAGE</param-name>
		<param-value>Development</param-value>
	</context-param>
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping> 
	<welcome-file-list>
		<welcome-file>test.xhtml</welcome-file>
	</welcome-file-list>
</web-app>

faces-config.xml

bc. 
<?xml version="1.0"?>
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
            http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
    version="2.0">
  <application>
  </application>
</faces-config>

sun-web.xml

bc. 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sun-web-app PUBLIC "-//Sun Microsystems, Inc.//DTD GlassFish Application Server 3.0 Servlet 3.0//EN" "http://www.sun.com/software/appserver/dtds/sun-web-app_3_0-0.dtd">
<sun-web-app error-url="">
  <context-root>/SES</context-root>
  <class-loader delegate="true"/>
  <jsp-config>
    <property name="keepgenerated" value="true">
      <description>Keep a copy of the generated servlet class' java code.</description>
    </property>
  </jsp-config>
</sun-web-app>

* Build the war with: 

Now open project in Netbeans.  It'll recognize it's a web project.  Create a test.xhtml facelet, and launch it.



The rest of this document is a bit old...I'm leaving it here for future reworking.

h1. Required Software

h2. Eclipse

Eclipse will be your primary development environment.  Download the Java EE Edition from @http://www.eclipse.org@.  For full setup instructions go "here":../machineSetup/eclipse.html

h2. Code Repository

You will be sharing code with other people in a Subversion code repository.  You need to install the SubClipse add-on to eclipse to enable this functionality.  Download eclipse from @http://tigris.org@.  For full setup instructions go "here":../machineSetup/eclipse.html#subclipse

h2. Maven: Dependency Management

For your coding you will be depending on third party libraries.  Managing these can be a head-ache without an automated system.  Maven is the system we will use for this.  Download and install maven from @http://www.codehaus.org@.  See "this page":../machineSetup/maven.html for detailed documentation.

* You will tell eclipse once where your maven repository is with the following command: (ensure that Eclipse is not running)

bc. mvn -Declipse.workspace=/home/ft/workspaces/wksp1/ eclipse:add-maven-repo

I have found on windows this is easiest to do by cd'ing to your workspace folder then doing:

bc. mvn -Declipse.workspace=. eclipse:add-maven-repo

* Install the m2eclipse maven pluggin.

h2. Cygwin

If you are a windows user you'll need to install @cygwin@ as well, otherwise if you are a linux or mac user you can skip this step.  *** put in some instructions on how to install cygwin here. ***

h1. Setup Project

* In eclipse right click in the project explorer and choose: @Dynamic Web Project@.  Name it.  We'll call ours @tailor@ for demonstration purposes.

* press 'Next' and make Java Source Directory = @/src/main/java@

* press 'Next' and make Web Source Directory = @/src/main/webapp@

* click 'Finish'

* Right-click the @tailor@ project and choose: m2 Maven > Enable Dependency Management

* Supply the required info: group id, artifact id, packaging = war.

* Add folders:
** @/src/test/java@
** @/src/main/resources@
** @/src/test/resources@

* Add a new run configuration to copy the required libraries to WEB-INF/lib

bc. Run > Run Configurations...

* Base directory: @${workspace_loc:/t5}@

* Goals: @dependency:copy-dependencies -DoutputDirectory=src/main/webapp/WEB-INF/lib@

!images/mvn_wtp_setup.png!

* Open the _Servers_ view and select @Add and Remove...@, shuttle your new @tailor@ project from the left pane to the right pane.

h2. Add required tag libraries

See: "Required Tag Libraries":TagLibraries.html for the required tag libraries to add to your pom.xml.

h1. Conclusion

That's it your finished and now ready to begin developing your website and learning new technologies.  Suggested next step:

* "Tutorial 1":tutorial1.html
