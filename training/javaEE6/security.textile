"home":../../index.html > "Training":../index.html > "Java EE 6":index.html > Security

p(toc). Table of Contents

{toc}

h1. Getting started

Include the following minimum configuration details into your project.

h2. Maven

Whenever you update your pom.xml remember to run: 

bc. 
mvn eclipse:eclipse

to get your classpath correct in eclipse.

<filelocation> project/pom.xml

bc. 
	<dependencies>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-config</artifactId>
			<version>3.0.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-taglibs</artifactId>
			<version>3.0.2.RELEASE</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>3.0.1.RELEASE</version>
		</dependency>
	</dependencies>
	<build>
		<finalName>test1</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-eclipse-plugin</artifactId>
					<version>2.7</version>
					<configuration>
						<downloadSources>false</downloadSources>
						<wtpversion>2.0</wtpversion>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>



h2. web.xml

<filelocation> project/src/main/webapp/WEB-INF/web.xml

bc. 
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/applicationContext-security.xml</param-value>
	</context-param>
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
</web-app>
	
h2. applicationContext.xml

<filelocation> project/src/main/webapp/WEB-INF/applicationContext-security.xml	

bc. 
<?xml version="1.0" encoding="UTF-8"?>
<beans:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security-3.0.xsd">
  <http auto-config='true'> 
    <intercept-url pattern="/**" access="ROLE_USER" /> 
  </http> 
  <authentication-manager> 
    <authentication-provider> 
      <user-service> 
        <user name="admin" password="welcome1" authorities="ROLE_USER, ROLE_ADMIN" /> 
      </user-service> 
    </authentication-provider> 
  </authentication-manager> 
</beans:beans>

--------------------------------------------------------------------------

h1. Intro

Problem: doesn't seem to be a way to use JSF security + form based security + my own database of username/passwords/rolls.

Actually take that back...here: http://72.5.124.55/javaee/6/docs/tutorial/doc/bncbx.html#bncby they talk about form-based security with a servlet, that looks promising, but need to see where/how the servlet is made.

I think we can create a servlet that intercepts anything going to certain directories, we can apply annotations perhaps???  not sure what else we'd need.

We are going to use

        <!-- Defining A Security Constraint -->

        <security-constraint>
 <!-- Specifying the Resources to be Protected -->

            <web-resource-collection>
                <web-resource-name>SalesInfo</web-resource-name>
                <url-pattern>/order/*</url-pattern>
                <http-method>GET</http-method>
                <http-method>POST</http-method>
            </web-resource-collection>
 <!-- Specifying which Users Can Access Protected Resources -->

            <auth-constraint>
                <role-name>manager</role-name>
            </auth-constraint>
 <!-- Specifying Secure Transport using SSL -->

            <user-data-constraint>
                <transport-guarantee>CONFIDENTIAL    </transport-guarantee>
            </user-data-constraint>
        </security-constraint>

 <!-- Specifying an Authentication Method -->
        <login-config>
            <auth-method>BASIC</auth-method>
            <realm-name>file</realm-name>
        </login-config>
        
        
        http://72.5.124.55/javaee/6/docs/tutorial/doc/bncbx.html#bncby


h1. Resources

* http://java.dzone.com/articles/getting-started-spring

* google: "java ee 6 security"
* "Security Web Page 1":http://www.coresecuritypatterns.com/blogs/?p=1622
* "Security Web Page 2":http://72.5.124.55/javaee/6/docs/tutorial/doc/bnbwj.html

<hr>

f you're willing to try a bit more advanced approach then I suggest looking into spring-security+JSF. It works like a charm.

You can write your application as if it wasn't under security and then just configure which areas that should be protected using aspects.

Spring security: http://static.springsource.org/spring-security/site/

A Tutorial: http://ocpsoft.com/java/acegi-spring-security-jsf-login-page/

* http://my.safaribooksonline.com/9780137013968
This is a safari book I was reading that has a good in-depth intro to JSF 2

* http://static.springsource.org/spring-security/site/start-here.html
REALLY do start here.

* http://www.ibm.com/developerworks/java/library/j-acegi5/index.html
5 part series (April2008) Acegi security with JSF

* http://ocpsoft.com/java/jsf-java/spring-security-what-happens-after-you-log-in/
This one shows how to hide certain parts of a page based on the user id.  Also shows how to log in a user from a PUBLIC page and then redirect them back to that public page.

* http://ocpsoft.com/java/acegi-spring-security-jsf-login-page/
get a fully functional JSF login page working with Spring Security

* http://dominikdorn.com/facelets/
http://dominikdorn.com/facelets/

* http://www.javaworld.com/javaworld/jw-04-2008/jw-04-acegi-jsf.html
Acegi security for JSF applications