"home":../../index.html > "training":../index.html > "Java EE 6":index.html > String Externalization

h1. Table of Contents

{toc}

h1. Introduction

In websites it is advantageous to externalize all the words in your website.  This has two advantages.  First it separates the writing (copy writing), from the layout (HTML) of your code.  That way, non-HTML coders, can adjust the text on your website without knowing HTML.  The second and more profound advantage is that this lays the ground work for making your site multi-lingual. 

The other main point is that this is useful for text that doesn't change very often.  If you have dynamic messages that need to be displayed please use the technique outlined in the "Managed Bean":ManagedBeans.html documentation.

h1. String Externalization

h2. Create .properties File

The first step in string externalization is to create the following file: .  _We use spicevan.com as our fictional company, so you can replace this with your companies domain name path_.  In this file put the following contents:

<filelocation>/src/main/resources/com/spicevan/language/messages.properties

bc. 
hello=Hello World!  I'm back.
goodbye=Now it's time to say goodbye.

Now lets register this @messages.properties@ file in the @faces-config.xml@ file.

<filelocation>src/main/webapp/WEB-INF/faces-config.xml

bc. <?xml version="1.0"?>
<faces-config xmlns="http://java.sun.com/xml/ns/javaee"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facesconfig_2_0.xsd"
              version="2.0">
  <application>
    <resource-bundle>
      <base-name>com.spicevan.language.messages</base-name>
      <var>msgs</var>
    </resource-bundle>
  </application>              
</faces-config>

Now in your html you can make use of this as follows:

<filelocation>/src/main/webapp/test.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml">
	<body>
		#{msgs.hello}<br/>
		#{msgs.goodbye}
	</body>
</html>

h1. Internationalization (I18N)

This now leads us directly into internationalizing (aka i18n for those who don't like to type long words) the website.  

h2. Language Specific Files

Create a french version of the message.properties file as such:

<filelocation>/src/main/resources/com/spicevan/language/messages_fr.properties

bc. hello=Bonjour Monde!

Now in order to see this get taken up by the website we need to specify a french locale.

h2. Setting the Locale

You can set the local three different ways:

h3. Browser

You can let the browser choose the locale. Set the default and supported locales in:

<filelocation>/src/main/webapp/WEB-INF/faces-config.xml

bc. 
<faces-config>
   <application>
    <locale-config>
         <default-locale>en</default-locale>
         <supported-locale>fr</supported-locale>
      </locale-config>
  </application>
</faces-config>

To test, in firefox > Edit > Prefrences > Content > Languages > Choose..., then add the _French_ language.

Goto: @http://localhost:8080/simpleWeb6/test.jsf@

h3. Programmatically

You can set the locale programatically. Call the setLocale method of the UIViewRoot object:

bc. 
UIViewRoot viewRoot = FacesContext.getCurrentInstance().getViewRoot();
viewRoot.setLocale(new Locale("fr"));

h3. Per Page

You can set the locale for an individual page by using the @f:view@ element with a locale attributeâ€”for
example:

<filelocation>/src/main/webapp/test.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml"
	    xmlns:f="http://java.sun.com/jsf/core">
	<f:view locale="fr">
		<body>
			#{msgs.hello}<br/>
			#{msgs.goodbye}
		</body>
	</f:view>
</html>

To test visit: @http://localhost:8080/simpleWeb6/test.jsf@

The locale can be dynamically set:

bc. <f:view locale="#{user.locale}"/>

Now the locale is set to the string that the getLocale method returns. This is useful in applications that let
the user pick a preferred locale.

h1. String with Parameters

Sometimes you want to include parameters into your string messages such as:

You have @10@ dollars in your bank account.

To achieve this functionality setup your string to look like the following:

<filelocation>/src/main/resources/com/spicevan/language/messages.properties

bc. accountBalance=You have {0} dollars in your bank account.

Make use of this string like this:

<filelocation>/src/main/webapp/test.xhtml

bc. 
<html xmlns="http://www.w3.org/1999/xhtml"
	    xmlns:f="http://java.sun.com/jsf/core">
	<body>
		<h:outputFormat value="#{msgs.accountBalance}">
			<f:param value="#{account.balance}"/>
		</h:outputFormat>
	</body>
</html>

<filelocation>/src/main/java/Account.java 

bc. 
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
@ManagedBean
@RequestScoped
public class Account {
	private int balance = 1;
	public int getBalance() { return balance; }
	public void setBalance(int balance) { this.balance = balance; }
}

I put in the _@RequestScoped_ so that I can just update the Account.java file and hit refresh in the browser to see the updated changes.

h2. Parameter Value based Choices in Strings

Now if you have only 1 dollar in your account, you want the string to read: "You have 1 dollar in your account." _not_ "You have 1 dollars in your account."  To achieve update the files as follows:

<filelocation>/src/main/resources/com/spicevan/language/messages.properties

bc. accountBalance=You have {0,choice,0#{0} dollars|1#1 dollar|2#{0} dollars} in your bank account.

The last choice gets chosen for any values greater than 2 as well.

h2. Formatting

You can format numbers as currency amounts by adding a suffix number, currency to the placeholder, like this:

bc. currentTotal=Your current total is {0, number, currency}.

In the United States, a value of 1023.95 would be formatted as $1,023.95. The same value would be displayed
as E1.023,95 in Germany, using the local currency symbol and decimal separator convention.
