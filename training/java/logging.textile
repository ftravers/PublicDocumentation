"home":../../index.html > "training":../index.html > Logging

p(toc). Table of Contents

{toc}

h1. Reference

http://www.crazysquirrel.com/computing/java/logging.jspx

h1. Basics

h2. Loggers

For each package there is a @Logger@.

bc. 
Logger logger = Logger.getLogger(packageName);

h2. Handlers

* For each logger you can add zero or more @Handlers@.  Handlers are traditionally either a console handler or a file handler.

bc. 
Logger logger = Logger.getLogger(packageName);
Handler handler = new ConsoleHandler();
logger.addHandler(handler);

h3. FileHandler

h4. Appending

If you choose to append, each time your program starts it will just add to the end of any existing log files, it won't start them from scratch.  For development usually false, for production true.

bc. 
String logFileName = "log.txt";
boolean appendToExitingFiles = false;
int howManyLogFilesToMainatain = 2; // once one is full move onto the second
int sizeInBytesToLimitLogfileTo = 1000000; // size in bytes
Handler fileHandler = new FileHandler(logFileName,sizeInBytesToLimitLogfileTo,howManyLogFilesToMainatain,appendToExitingFiles);

h2. Formatters

For each handler you can adjust what the output looks like using a @Formatter@ 

bc. 
class MyFormatter extends Formatter {
	public String format(LogRecord rec) {
		return rec.getMessage() + "\n";
	}
}
Logger logger = Logger.getLogger(packageName);
Handler handler = new ConsoleHandler();
logger.addHandler(handler);
Formatter mf = new MyFormatter();
handler.setFormatter(mf);


h1. Sample

bc. 
public class LogSetup {
	public static void setupLogging() {
		// Remove console handler from root logger
		Logger rootLogger = Logger.getLogger("");  // get root logger
		rootLogger.setLevel(Level.FINEST); // set root logger to log at finest level.
		Handler[] handlers = rootLogger.getHandlers(); // get all handlers for root logger
		Formatter mf = new MyFormatter();
		for (int index = 0; index < handlers.length; index++) {  // for each handler...
			Handler handler = handlers[index];
			String handlerClassName = handler.getClass().getName();
			if (handlerClassName.indexOf("ConsoleHandler", 0) >= 0)  // if this handler is of type ConsoleHandler
				handler.setFormatter(mf); // set the formatter to be my formater as opposed to the SimpleFormatter
				handler.setLevel(Level.OFF); // set handler logging to OFF.
		}
		setPackageLogLevels();
	}
	private static void setPackageLogLevels() {
		String packageName = "httpclient";
		setPackageLogLevel(packageName, Level.INFO);	
		packageName = "com.oracle.git";
		setPackageLogLevel(packageName, Level.FINEST);
		packageName = "com.oracle.ngsp";
		setPackageLogLevel(packageName, Level.FINEST);
		packageName = "com.oracle.wrapper.crmondemand";
		setPackageLogLevel(packageName, Level.FINEST);
	}
	private static void setPackageLogLevel(String packageName, Level level) {
		Logger logger = Logger.getLogger(packageName);
		logger.setLevel(level);		
		// prevent passing up log messages up the chain
		logger.setUseParentHandlers(false);
		Handler handler = new ConsoleHandler();
		Formatter mf = new MyFormatter();
		handler.setFormatter(mf);
		handler.setLevel(level);	
		logger.addHandler(handler);
	}
}
class MyFormatter extends Formatter {
	public String format(LogRecord rec) {
		// return rec.getSourceClassName() + ":" + rec.getSourceMethodName() + rec.getMessage() + "\n";
		return rec.getMessage() + "\n";
	}
}

!images/java-logging.png!