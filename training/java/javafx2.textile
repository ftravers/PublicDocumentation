h2. Images

bc. 
ImageView {
  image: Image {url: "{__DIR__}dukewave.png"}
}

The example specifies the image using the __DIR__ variable. By default, it points to the current directory, so make sure that the image is located in the same directory as the application's compiled classes. To run the application on the mobile emulator, make sure that the image is packed into the application jar file along with the compiled classes.

h1. Binding

bc. 
Circle {
    centerX: bind slider.value+50 centerY: 60 radius: 50
  ...
}  

Finally, bind the center of the circle to the slider's value. The slider is displayed in the application window and you can change its value by moving the knob. However, you have no means to refer to the slider's value, which is required for binding. The solution is to define a slider variable and then refer to the slider.value. To define a binding relationship, complete the following steps.

The bind operator keeps track of any changes in the value on the right. As the slider's value changes, the center of the circle is updated and JavaFX automatically renders the circle at the new location. Since the position of the radial gradient filling does not change, you can see how the circle shifts relative to the initial filling.

bc. 
def slider = Slider{min: 0 max: 60 value: 0 translateX: 10 translateY: 110};
Stage {
    title: "Data Binding"
    width: 220
    height: 170
    scene: Scene { 
        content: [ 
            slider, 
            Circle {
                centerX: bind slider.value+50 centerY: 60 radius: 50
	            stroke: Color.YELLOW
	            fill: RadialGradient {
	                centerX: 50 centerY: 60 radius: 50
	                focusX: 50 focusY: 30
	                proportional: false
	                stops: [
	                    Stop {offset: 0 color: Color.RED},
	                    Stop {offset: 1 color: Color.WHITE},
	                ]
                }//RadialGradient
           }//Circle
      ]
  }//Scene
}//Stage   

h2. Grouping

bc. 
Stage {
    title: "Nodes"
    scene: Scene {
        width: 220
        height: 170  
        fill: Color.LIGHTBLUE
        content: Group {
            content: [
                Circle {
                    centerX: 50   centerY: 50   radius: 50
                    stroke: Color.YELLOW
                    fill: Color.WHITE
                },
                Text {
                    transforms: Transform.rotate(33, 10, 100)
                    content: "Duke"
                },
                ImageView {
                    image: Image {url: "{__DIR__}dukewave.png"}
                }//ImageView
            ]//Content
        }//Group
    }//Scene
}//Stage

The @Group@ @content@, contains a sequence of objects belonging to it.

h3. Toggle Group ( radio buttons )

Create a group of radio buttons in which only one button can be selected at a given time. This is called a toggle group. To define radio buttons:

bc. 
def group = ToggleGroup{};
def choiceText = ["STOP", "READY", "GO"];
def choices = for (text in choiceText)
RadioButton{
        toggleGroup: group
        text: text
}//RadioButton


h3. Group Transformations

bc. 
...
content: Group {
    translateX: 55
    translateY: 10
    content: [
        Circle {
...

h1. Layouts

h2. hbox

"hbox example":http://download.oracle.com/docs/cd/E17411_01/javafx/1.3/tutorials/ui/layout/index.html#hbox

bc. 
   HBox{ spacing: 15 content: lights nodeVPos: VPos.CENTER}

Specify the spacing variable to set an offset between the circles.

Set the nodeVPos instance variable to VPos.CENTER in this container so that circles will be centered vertically.
The nodeVPos variable defines the vertical position of each node within the HBox container. Its default value is VPos.TOP. 

h2. vbox

"vbox example":http://download.oracle.com/docs/cd/E17411_01/javafx/1.3/tutorials/ui/layout/index.html#vbox



h1. Fill
  
h2. Linear Gradient

bc. 
Rectangle {
	...
	fill: LinearGradient {
	  startX: 0.0, startY: 1.0, endX: 0.0, endY: 0.0,
	  proportional: true
	  stops: [
			Stop {offset: 0.0 color: Color.web("#99ddff")},
			Stop {offset: 1.0 color: Color.web("#337799")}
		]
	}       
}

"Sample Explained":http://download.oracle.com/docs/cd/E17411_01/javafx/1.3/tutorials/ui/graphics/index.html#rectangle

h2. Radial Gradient

bc. 
fill: RadialGradient {
	centerX: 50 centerY : 60 radius: 50
	focusX: 50 focusY: 30
	proportional: false
	stops: [
		Stop {offset: 0 color: Color.RED},
		Stop {offset: 1 color: Color.WHITE}
	]
}

h1. Drawing

h2. Polygon

bc. 
// triangle
Polygon {
    points: [
    	142.0,  126.0, 
    	113.0, 108.0, 
    	111.0, 143.0
    ]
    fill: Color.web("#337799")
}

Creates a polygon, defined by an array of x,y coordinates. The Polygon class is similar to the Polyline class, except that the Polyline class is not automatically closed.

h1. Effects

h2. Drop Shadow

bc. 
// triangle with drop shadow
Polygon {
      points: [142.0,  123.0, 110.0, 105.0, 110.0, 140.0]
      fill: Color.web("#ffffff")
      effect: DropShadow {
                  color: Color.web("#337799")
                  offsetY: 5
                  offsetX: 2
      }
}


h2. Reflection

bc. 
Group {
    content: [
        ...
    ] 
    effect:  Reflection {fraction: 0.5 topOpacity: 0.5 topOffset: 0.5}
}

The reflection object literal has a fraction instance variable that defines the percentage of the button area that is visible in the reflection. The topOpacity variable defines the opacity of the reflection, and topOffset defines the distance between the bottom of the button and the top of the reflection.

Note: The fraction and the topOpacity variables can take only values ranging from 0.0 to 1.0.

h1. Controls

h2. Slider

bc. 
content: [
    Slider {
        min: 0 
        max: 60 
        value : 0
        translateX: 10
        translateY: 110
    }
]