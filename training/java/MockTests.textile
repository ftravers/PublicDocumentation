"home":../../index.html > "training":../index.html > Mock Tests

p(toc). Table of Contents

{toc}

h1. Introduction

Often you will be writing code that depends on some outside resource that may not be available.  To handle this situation you can mock the outside code.  Basically you would want to have a the following items.

* a jar file that is filled with _Interfaces_ for the outside resources.  So this jar wouldn't have any implementation code in it, just what the API is for the outside resource.

From this you can go ahead and develop your code without requiring the implementation of the outside resource.

h1. Example

There is a great video on how to do what is mentioned below at: "Mocking Video Example":http://agilesoftwaredevelopment.com/videos/test-driven-development-mock-objects

Lets take the case where the outside system is a CRM system that is accessible by web services and you are writing an application that reads from a local database and populates the external CRM system.  The team who is writing the java API that calls the Web Services of the CRM system are not finished yet, but you'd like to get your code as complete as possible for when they are finished.

All you have from the other team is a jar file of API Interface code, but it has no implementation.  Instead of waiting until they are finished you can code up your side of the equation using mock objects and then when they are finished the switch to using their code will be trivial.

Lets take an example where you have a users ID, and from that ID you want to retrieve the full Employee Object that is stored in the CRM system.The interface code would look like:

bc. 
package com.oracle.ngsp.crmod.services;
import com.oracle.ngsp.crmod.api.objects.EmployeeData;
public interface EmployeeService {
	public EmployeeData retrieveEmployeeData( int personId );
}

We have an object: @EmployeeData@ that we DO have the implementation for.  This is like a data transfer object.  Here is a sample of it's implementation:

bc. 
package com.oracle.ngsp.crmod.api.data;
public class EmployeeData {
	private int employeeId;
	private String firstName;
	...

Now we need to write code that gets an @EmployeeData@ object from the @EmployeeService@.  However, all we have is the @EmployeeService@ interface and no implementation.  This is the standard situation and understanding how to deal with this situation is the WHOLE point of this article.

We use mock objects to mock the @EmployeeService@ interface.  We are going to create a service @EmployeeStorageService@ for our code that DOES work and to test the service which later will use the actual @EmployeeService@ implementation, not just the Interface, we need to use a Mocks.  This tutorial will use _Mockito_.

Since we always want to use Test Driven Development(TDD), lets begin by writing our JUnit test case that will test our @EmployeeStorageService@.  Here are the individual steps.  We'll put them all together at the end.  First step is to create a mock of the @EmployeeService@ class.

bc. 
public class EmployeeStorageServiceTest {
	private EmployeeService employeeService;
	@Before
	public void setUp() throws Exception {
		employeeService = mock(EmployeeService.class);
	}

Now what we want to do is call this mock @EmployeeService@ and have it return to us something we expect/want.  So lets add that:

bc. 
public class EmployeeStorageServiceTest {
	private static final int PERSON_ID = 10;
	private static final String FENTON = "Fenton";
	private EmployeeService employeeService;
	private EmployeeData employee;
	@Before
	public void setUp() throws Exception {
		employeeService = mock(EmployeeService.class);
		employee = new EmployeeData();
		employee.setFirstName(FENTON);
		employee.setEmployeeId(PERSON_ID);
	}
	@Test
	public void testGetEmployeeData() {
		when(employeeService.retrieveEmployeeData(PERSON_ID)).thenReturn(employee);
	}
	
So this is fine and dandy, but this test isn't the Class who need to have a _working_ @EmployeeService@, it is our @EmployeeStorageService@ code that needs a working @EmployeeService@ object.  So lets write up our @EmployeeStorageService@ class so that it gets an @EmployeeService@ object written to it with a set method.	
	
bc. 
package com.oracle.ngsp.crmod.mock.employee;
import com.oracle.ngsp.crmod.api.data.EmployeeData;
import com.oracle.ngsp.crmod.api.services.EmployeeService;
public class EmployeeStorageService {
	private EmployeeService employeeService;
	protected void setEmployeeService(EmployeeService employeeService) {
		this.employeeService = employeeService;
	}
	public EmployeeData getEmployeeData( int personId ) {
		EmployeeData result = employeeService.retrieveEmployeeData(personId);
		return result;
	}
}

Now in our test, lets pass in this Mock object.

bc. 
	private static final int PERSON_ID = 10;
	private static final String FENTON = "Fenton";
	private EmployeeStorageService employeeStorageService;
	private EmployeeService employeeService;
	private EmployeeData employee;
	@Before
	public void setUp() throws Exception {
		employeeStorageService = new EmployeeStorageService();
		employeeService = mock(EmployeeService.class);
		employee = new EmployeeData();
		employee.setFirstName(FENTON);
		employee.setEmployeeId(PERSON_ID);
		employeeStorageService.setEmployeeService(employeeService); 
	}
	@Test
	public void testGetEmployeeData() {
		when(employeeService.retrieveEmployeeData(PERSON_ID)).thenReturn(employee);
		EmployeeData actual = employeeStorageService.getEmployeeData(PERSON_ID);
		EmployeeData expected = new EmployeeData();
		expected.setEmployeeId(PERSON_ID);
		expected.setFirstName(FENTON);
		assertEquals(expected, actual);
	}
	
	Thats it!