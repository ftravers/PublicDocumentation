# JeOS Template Builder

## TB App

In browser goto your TB URL.  Might be one of:

    http://alm.hk.oracle.com/ovmtb

select the `New Template Project` button on the top right.

## Sizing

We can name this template after the size of the system disk we will
allocate to it and the OS it will be running.  Lets choose: `6G1Gswp`,
meaning we'll assign a 6 GB system disk with 1GB swap.

## PVM vs. HVM

Choose `EL55_i386_PVM_jeos`, as the JeOS Image, and hit next.
PVM(Para-Virtualized Machine) is _WAY_ faster than a HVM(Hosted
Virtual Machine).  This is fine for OEL(Oracle Enterprise Linux), but
if we want a Windows VM, we are stuck using HVM.  (Note: there are PVM
drivers for windows which we can install to minimize the slowness of
HVM)

## CPU/RAM

We simply don't care about VCPUs and Memory as these are trivial to
change after the fact.  System disk size and Swap space, however are
harder to change.  The general rule of thumb for swap space is that it
should be twice the RAM.  For our purposes, I want this template to
have a SLIM memory footprint, so 512 RAM should be okay, and we'll set
the swap to be 1024.  We can set the System disk size to be 6GB, which
is: 6144MB.  Hit next.

## YUM Repos

Use the OEL 5U3 repo. Next.  Add the `wget` package. Next. Skip
Additional Packages. Next. Click `Save and Build`.  It will take some
time (maybe ~5-10 minutes) so relax and have a beer! :)

# Using the new template

## File Locations

The new template will be saved to:

    /opt/ovmtb/tarballs

as it reports in the status window.  Lets copy that to our VM server,
which is easy because of the NFS mount we'll create next:

Typically we'll build a VM inside of OVM Template Builder, this will
put a `*.tgz` file in the folder: `/opt/ovmtb/tarballs`.  We have the
folder `/mnt/vmsrv` folder mounting the OVM Server folder
`/OVS/downloads`.  If you have NFS difficulties consult: [NFS
Setup](applications.html#nfs)

## Extract

Copy the `*.tgz` over to `/mnt/vmsrv`.  On OVM Server, move the file
into `/OVS/running_pool`, and extract there.

The extracted dir contains at least a `system.img` file and a `vm.cfg`
file.

Below we use `project_3.tgz` as a sample name, yours may differ.

```bash
# mv  /OVS/downloads/project_3.tgz /OVS/running_pool/
# tar xvfz /OVS/running_pool/project_3.tgz
# cat vm.cfg
bootloader = '/usr/bin/pygrub'
disk = ['file:/OVS/running_pool/ovmm_ovmtb/System.img,xvda,w']
memory = '512'
name = 'ovmm_ovmtb'
vcpus = 1
on_crash = 'restart'
on_reboot = 'restart'
vfb = ['type=vnc,vncunused=1,vnclisten=0.0.0.0']
vif = ['bridge=xenbr0,mac=00:16:3e:00:00:01']
```

*IMPORTANT* make sure the vif has a mac address set.

## Start VM

    # xm create vm.cfg

When you launch a VM it will be given a VNC port.  It chooses whatever
is available, so we need to try a few sometimes before we can get the
correct one.  You will log in with `serverIp:0` or `serverIp:1`,
etc..., until you pick the right number after the colon `:`

## Login

Once you are VNC'd in you can determine the DHCP IP address the VM got
and you can do a regular shell login.

    username = root
    password = ovsroot

## VNC Clients

* Ubuntu: Out of the box: Applications > Internet > Remote Desktop Viewer
* Mac: Chicken of the VNC
* Windows: Tight VNC

# Configure VM

## Open port SSH and Web ports

    system-config-securitylevel-tui --quiet --port=http --port=ssh --port=https

## Static IP

To convert a dhcp OEL to Static IP address edit file:

```bash
# vi /etc/sysconfig/network-scripts/ifcfg-eth0
DEVICE=eth0
ONBOOT=yes
BOOTPROTO=static
IPADDR=192.168.8.118
NETMASK=255.255.255.0
GATEWAY=192.168.8.1
TYPE=Ethernet
```

**NOTE:** Make sure there is **NO HWADDR** setting in here.

## Hostname

Change the hostname here:

    # vi /etc/sysconfig/network

set hostname with:

    # hostname ucm

## Restart Network

Now you can restart your network services with the following command:

    # service network restart

Your terminal session should die here and you can now setup a new [SSH
trust](secure.html#sshAutoLogin)

Finally update your name servers, and root passwords

```bash
# cat > /etc/resolv.conf
search hk.oracle.com
nameserver 10.179.253.14
nameserver 146.56.237.50
nameserver 140.83.70.155
# passwd
```
## Install Software

Most software install will be done via `yum`, which is the default for
Redhat based systems.  First thing we need to do is get a decent yum
repo file going.  So lets download a latest version.  You might need
to set your web proxy, so that step is listed first.

## Set Proxy

Put the export http_proxy line at the bottom of `/etc/profile` so all
users get this environment variable set.

    # vi /etc/profile
    export http_proxy=http://www-proxy.sg.oracle.com

## Setup YUM

Download the repo file:

    # cd /etc/yum.repos.d/
    # wget http://public-yum.oracle.com/public-yum-el5.repo

Change all the `enabled=0` to `enabled=1`, for: 

    [el5_ga_base]
    [el5_u5_base]
    [ol5_u5_base]
    [el5_addons]
    [el5_oracle_addons]

Test it out:

    yum install tree

You should be able to install other `yum` packaged software now.
