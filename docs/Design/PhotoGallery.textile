p(toc). Table of Contents

{toc}

h1. Photo Gallery

h2. Overview

The photo gallery is setup to run as a single page.  Each time a folder is selected the page reloads passing the folder id as a parameter on the URL(Universal Resource Locator).  When photos are checked in they will show up in the search results.  We provided the ability to specify the content id of the photo on the URL so that when a user clicks on that search result they are taken to the photo gallery folder _and_ image.

h2. Configuration

The photo gallery is deployed as a web application and written as a JPDK(Java Portal Development Kit) portlet.  There is one configuration setting in the web.xml where the root photo gallery folder id is specified.  There are also configuration entries for specifying the content server to communicate with (port/hostname).

A component: @FetchChildFolders@ was built and is required to be installed on the content server for the Photo Gallery to work as expected.  This component defines services to return the folder tree structure.

h2. Security

The security used with the Photo Gallery is the same as with all applications.  It simply passes the username, retrieved from the portal context, to the content server through the RIDC(Remote Intradoc Client) java api.  All actions: search, get photo, etc, pass the username as a parameter and apply the security of the content server to the action, thereby only returning photos that the user should have access to.  As such, all security is delegated and controlled at the data layer level of the Content Server.

h2. Navigation
 
There is a tree control on the user interface for users to navigate between the folders on the content server.  This is a javascript control that is built with the results obtained from the @FetchChildFolders@ component.

h1. Glossary

{glossary} 