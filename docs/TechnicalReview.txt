Project Review

This document outlines areas of interest for the Portal to UCM integration.


	

	
Technical Debt
There is a term in the industry, 'Technical Debt', coined by Ward Cunningham, quoting:

"Shipping first time code is like going into debt. A little debt speeds development so long as it is paid back promptly with a rewrite... The danger occurs when the debt is not repaid. Every minute spent on not-quite-right code counts as interest on that debt. Entire engineering organizations can be brought to a stand-still under the debt load of an unconsolidated implementation, object-oriented or otherwise." (http://en.wikipedia.org/wiki/Technical_debt)

That I think is relevant to this project.  Because of tight timelines, certain shortcuts have been made that can attribute to some of the difficulties that are now faced in the project.  Specific aspects of this will be highlighted throughout the rest of the paper.
	
Virtual Environments
Virtual environments have not been employed to date.  The principle benefit of virtual environments is the ability to 'undo' changes to a system quite easily.  This has two benefits.  First it makes the developers feel more at ease with testing things as they are not worried about breaking the environment as they can roll-back to a known state easily.  The second benefit is the efficient use of hardware and the isolation of multiple systems from each other on a single piece of hardware.  We can have upwards of 15 environments all running merrily on the same single hardware.  This makes it easy to setup new systems for testing, practicing disaster recovery steps, doing performance tests against, etc.
Virtual environments have been setup in development and it is recommmended that this approach be heavily pursued and it's benefits thereby reaped.
	
Lack of Environments	
In a very controlled web application environment, there will be well established and functional environments corresonding to development, staging and production.  In this project these environments have come out of use for a number of reasons and we are left with solely a production environment.  The benefits this separation of concerns provides and the drawback the lack of this separation suffers from are present in the project.

Lack of Continuous Integration Tools
As the project develops further and further, it becomes more brittle and difficult to maintain.  An ideal scenario is to have automated tests that run in a continuous integration manner.  That is when source code is modified and checked into the source control system, the system then automatically builds the new system and re-runs the automated regression tests.  For example there may be libraries that two developers depend on and one developer updates the library and his code, but not the code of his colleague.  The resulting bugs only then show up directly in production and tracking down the source of the bugs becomes extremely time consuming and expensive.  Tools such as Hudson, and Maven are the right tools to be using to help resolve this situation.

Lack of Change Control Processes
Currently code is stored in a CVS repository in the development site.  This code then gets 'carried' on usb drives to the production site where it gets deployed manually to production.  There isn't a well defined process for establishing code releases.  Bugs that are introduced cannot be easily identified and rolling back to a specific release is not possible.  The artifacts that get deployed into production should be identified clearly and release tagging and promotion and demotion policies should be put in place.  The lack of this process will cause more pain as time goes on.

Application Server Running in Debug Mode
An important tool in a developers arsenal is the ability to debug live code running on the server.  With the lack of a functioning development environment where the application server is running in debugging mode, this precludes the developer from availing himself of this facility.  Debugging context sensitive bugs becomes excrutiatingly painful as developers are forced to resorting to 'Print' statements to output the state of the application as opposed to the richness of a debugger where they can examine the state of all variables easily.

Contribution-Consumption separation.
Typically in a WCM only environment, for production we create two environments.  One for contribution inside the firewall and one for consumption outside the firewall.  The following section has been included from a white paper at Oracle.  When reading it please keep in mind that the comments are for a WCM only environment.  Our environment has a Portal in front of the WCM environment so the observations aren't strictly applicable.  I include it however for edification purposes.

"shared/docs/content_management_instance_architecture.pdf - section 2.1.3"

A concern not raised in the article but I think is worth mentioning is that another reason contribution is kept inside the firewall is because it provides one more vector for attack from hackers on the outside.  Because our UCM environment is already shielded behind a firewall from public access, we are already achieving this benefit.

In regards to the second point made in the above paper, the security model is different from a WCM only site.  WCM only sites tend to not be personalized and not have logins.  That is distinctly different from the style that we are using which encourages people to log in and we provide different functionality based on who you are.  Therefore, having two systems isn't a benefit as we don't want to have separate security models.

The third point about having simpler security integrations to LDAP repositories is also again not an issue, as we are already exposing our LDAP repository externally through our portal, and don't want to have the complexity of two security configurations.

The area where contribution consumption separation is helpful is in the area of workflow.  There are certain cases whereby having workflow setup makes contribution difficult.  Specifically the list-detail functionality doesn't work with workflow turned on.  To work around these limitations the contribution/consumption model is use.  This allows us to push changes to the consumption server when we are ready to do so.  Since we would like to have workflow, this will be the primary driver for having both a contribution and a consumption UCM instance.

